import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: any;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Options for filtering events in the activity feed. */
export enum ActivityFeed {
  /** Events from the current user and anyone they follow. */
  Following = 'FOLLOWING',
  /** Events from everyone. */
  Global = 'GLOBAL'
}

/** Autogenerated return type of AddGameToLibrary */
export type AddGameToLibraryPayload = {
  __typename?: 'AddGameToLibraryPayload';
  /** The game purchase that's been added to the user's library. */
  gamePurchase?: Maybe<GamePurchase>;
};

/** Autogenerated return type of BanUser */
export type BanUserPayload = {
  __typename?: 'BanUserPayload';
  /** The user that has been banned. */
  user?: Maybe<User>;
};

/** Basic site statistics. */
export type BasicSiteStatistic = {
  __typename?: 'BasicSiteStatistic';
  /** The current number of Companies. */
  companies: Scalars['Int'];
  /** The current number of Engines. */
  engines: Scalars['Int'];
  /** The current number of Games. */
  games: Scalars['Int'];
  /** The current number of Genres. */
  genres: Scalars['Int'];
  /** The current number of Platforms. */
  platforms: Scalars['Int'];
  /** The current number of Series'. */
  series: Scalars['Int'];
};

/** Video game developers and publishers */
export type Company = {
  __typename?: 'Company';
  /** When this company was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games developed by this company. */
  developedGames?: Maybe<GameConnection>;
  /** ID of the company. */
  id: Scalars['ID'];
  /** Name of the company. */
  name: Scalars['String'];
  /** Games published by this company. */
  publishedGames?: Maybe<GameConnection>;
  /** When this company was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Wikidata identifier */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game developers and publishers */
export type CompanyDevelopedGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video game developers and publishers */
export type CompanyPublishedGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Company. */
export type CompanyConnection = {
  __typename?: 'CompanyConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CompanyEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Company>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type CompanyEdge = {
  __typename?: 'CompanyEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Company>;
};

/** Autogenerated return type of DeleteEvent */
export type DeleteEventPayload = {
  __typename?: 'DeleteEventPayload';
  /** Whether the event was deleted successfully or not. */
  deleted: Scalars['Boolean'];
};

/** Video game engines */
export type Engine = {
  __typename?: 'Engine';
  /** When this engine was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games built with this engine. */
  games?: Maybe<GameConnection>;
  /** ID of the engine. */
  id: Scalars['ID'];
  /** Name of the engine. */
  name: Scalars['String'];
  /** When this engine was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Wikidata identifier */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game engines */
export type EngineGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Engine. */
export type EngineConnection = {
  __typename?: 'EngineConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EngineEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Engine>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type EngineEdge = {
  __typename?: 'EngineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Engine>;
};

/** Represents events in the Activity Feed. */
export type Event = {
  __typename?: 'Event';
  /** When this event was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The type of event. */
  eventCategory: EventCategory;
  /** The 'eventable' type that this event is about. This can be one of a number of different types, depending on the event. */
  eventable: EventableUnion;
  /** The ID of the event, keep in mind that Events - unlike all other models - use UUIDs. */
  id: Scalars['ID'];
  /** When this event was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** The user that this event is about. */
  user: User;
};

/** Category types for events in the Activity Feed. */
export enum EventCategory {
  /** Event for a user adding a game to their library. */
  AddToLibrary = 'ADD_TO_LIBRARY',
  /** Event for a user updating the completion status of a game. */
  ChangeCompletionStatus = 'CHANGE_COMPLETION_STATUS',
  /** Event for a user favoriting a game. */
  FavoriteGame = 'FAVORITE_GAME',
  /** Event for a user following another user. */
  Following = 'FOLLOWING',
  /** Event for user creation. */
  NewUser = 'NEW_USER'
}

/** The connection type for Event. */
export type EventConnection = {
  __typename?: 'EventConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EventEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Event>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Event>;
};

/** Objects which may be the subject of events. */
export type EventableUnion = FavoriteGame | GamePurchase | Relationship | User;

/** This represents a game that has been favorited by a user. */
export type FavoriteGame = {
  __typename?: 'FavoriteGame';
  /** When this game was first favorited. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The game being favorited. */
  game: Game;
  /** The ID of the FavoriteGame record. */
  id: Scalars['ID'];
  /** When this favorite game was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** The user that favorited the game. */
  user: User;
};

/** Autogenerated return type of FavoriteGame */
export type FavoriteGamePayload = {
  __typename?: 'FavoriteGamePayload';
  /** The game that was added to the user's library. */
  game?: Maybe<Game>;
};

/** Autogenerated return type of FollowUser */
export type FollowUserPayload = {
  __typename?: 'FollowUserPayload';
  /** The user being followed. */
  user?: Maybe<User>;
};

/** Video games */
export type Game = {
  __typename?: 'Game';
  /** The average rating from all users who own the game. */
  avgRating?: Maybe<Scalars['Float']>;
  /** URL for the game's cover image. `null` means the game has no associated cover. */
  coverUrl?: Maybe<Scalars['String']>;
  /** When this game was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Developers of the game. */
  developers?: Maybe<CompanyConnection>;
  /** Game engines that the game runs on. */
  engines?: Maybe<EngineConnection>;
  /** Identifier for the Epic Games Store. */
  epicGamesStoreId?: Maybe<Scalars['String']>;
  /** Users who have favorited this game. */
  favoriters?: Maybe<UserConnection>;
  /** Genres of the game. */
  genres?: Maybe<GenreConnection>;
  /** Identifier for Giant Bomb. */
  giantbombId?: Maybe<Scalars['String']>;
  /** Identifier for GOG.com. */
  gogId?: Maybe<Scalars['String']>;
  /** ID of the game. */
  id: Scalars['ID'];
  /** Identifier for Internet Game Database. */
  igdbId?: Maybe<Scalars['String']>;
  /** Whether the game is in the current user's favorites, or null if there is no logged-in user. */
  isFavorited?: Maybe<Scalars['Boolean']>;
  /** Whether the game is in the current user's library, or null if there is no logged-in user. */
  isInLibrary?: Maybe<Scalars['Boolean']>;
  /** Identifier for the MobyGames database. */
  mobygamesId?: Maybe<Scalars['String']>;
  /** Name of the game. */
  name: Scalars['String'];
  /** Users who have this game in their libraries. */
  owners?: Maybe<UserConnection>;
  /** Identifier for PCGamingWiki. */
  pcgamingwikiId?: Maybe<Scalars['String']>;
  /** Platforms the game is available on. */
  platforms?: Maybe<PlatformConnection>;
  /** Publishers of the game. */
  publishers?: Maybe<CompanyConnection>;
  /** The release date of the game. */
  releaseDate?: Maybe<Scalars['ISO8601Date']>;
  /** The series that the game belongs to. */
  series?: Maybe<Series>;
  /** Identifier for Steam games. Games can have more than one Steam App ID, but most will only have one. */
  steamAppIds?: Maybe<Array<Scalars['Int']>>;
  /** When this game was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Identifier for Wikidata. */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameCoverUrlArgs = {
  size?: Maybe<GameCoverSize>;
};


/** Video games */
export type GameDevelopersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameEnginesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameFavoritersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameGenresArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameOwnersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GamePlatformsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GamePublishersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Game. */
export type GameConnection = {
  __typename?: 'GameConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GameEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Game>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/**
 * The size of the game cover. Game covers are downsized to fit within the
 * specified dimensions while retaining the original aspect ratio. Will only resize
 * the image if it's larger than the specified dimensions.
 */
export enum GameCoverSize {
  /** Game cover image with a maximum width of 500 and maximum height of 800. */
  Large = 'LARGE',
  /** Game cover image with a maximum width of 300 and maximum height of 500. */
  Medium = 'MEDIUM',
  /** Game cover image with a maximum width of 200 and maximum height of 300. */
  Small = 'SMALL'
}

/** An edge in a connection. */
export type GameEdge = {
  __typename?: 'GameEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Game>;
};

/**
 * This represents a game that a user has in their library. It includes data like
 * the user's rating for the game, comments, hours played, etc.
 */
export type GamePurchase = {
  __typename?: 'GamePurchase';
  /** Comments about the game. */
  comments?: Maybe<Scalars['String']>;
  /** The date on which the user completed the game. */
  completionDate?: Maybe<Scalars['ISO8601Date']>;
  /** How far the user has gotten in the game. */
  completionStatus?: Maybe<GamePurchaseCompletionStatus>;
  /** When this game purchase was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The game represented by the Game Purchase. */
  game: Game;
  /** The number of hours the game has been played by the user, if any. */
  hoursPlayed?: Maybe<Scalars['Float']>;
  /** ID of the game purchase. */
  id: Scalars['ID'];
  /** Platforms that the user owns this game on. */
  platforms?: Maybe<PlatformConnection>;
  /** Rating out of 100. */
  rating?: Maybe<Scalars['Int']>;
  /** The number of times a game has been replayed. */
  replayCount: Scalars['Int'];
  /** The date on which the user started the game. */
  startDate?: Maybe<Scalars['ISO8601Date']>;
  /** Stores that the user owns this game on. */
  stores?: Maybe<StoreConnection>;
  /** When this game purchase was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** The owner of the Game Purchase. */
  user: User;
};


/**
 * This represents a game that a user has in their library. It includes data like
 * the user's rating for the game, comments, hours played, etc.
 */
export type GamePurchasePlatformsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/**
 * This represents a game that a user has in their library. It includes data like
 * the user's rating for the game, comments, hours played, etc.
 */
export type GamePurchaseStoresArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Completion Status options for game purchases (games in a user's library). */
export enum GamePurchaseCompletionStatus {
  /** The game has been completed. */
  Completed = 'COMPLETED',
  /** The game was dropped without being completed. */
  Dropped = 'DROPPED',
  /** The game is 100% complete, e.g. with all achievements unlocked. */
  FullyCompleted = 'FULLY_COMPLETED',
  /** The game is currently being played. */
  InProgress = 'IN_PROGRESS',
  /** The game cannot be completed. */
  NotApplicable = 'NOT_APPLICABLE',
  /** The game is incomplete and not being played, but the user intends to come back to play it again later. */
  Paused = 'PAUSED',
  /** The game is unplayed. */
  Unplayed = 'UNPLAYED'
}

/** The connection type for GamePurchase. */
export type GamePurchaseConnection = {
  __typename?: 'GamePurchaseConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GamePurchaseEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<GamePurchase>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GamePurchaseEdge = {
  __typename?: 'GamePurchaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<GamePurchase>;
};

/** Options for sorting games. */
export enum GameSort {
  /** Sorted by the games that have the highest average rating. */
  HighestAvgRating = 'HIGHEST_AVG_RATING',
  /** Sorted with most recently updated game records last. */
  LeastRecentlyUpdated = 'LEAST_RECENTLY_UPDATED',
  /** Sorted by the games that have been favorited the most times. */
  MostFavorites = 'MOST_FAVORITES',
  /** Sorted by the games that are in the most users' libraries. */
  MostOwners = 'MOST_OWNERS',
  /** Sorted with newest game records first. */
  Newest = 'NEWEST',
  /** Sorted with newest game records last. */
  Oldest = 'OLDEST',
  /** Sorted with the games that were most recently released first. */
  RecentlyReleased = 'RECENTLY_RELEASED',
  /** Sorted with most recently updated game records first. */
  RecentlyUpdated = 'RECENTLY_UPDATED'
}

/** Video game genres */
export type Genre = {
  __typename?: 'Genre';
  /** When this genre was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games in this genre. */
  games?: Maybe<GameConnection>;
  /** ID of the genre. */
  id: Scalars['ID'];
  /** Name of the genre. */
  name: Scalars['String'];
  /** When this genre was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Identifier for Wikidata. */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game genres */
export type GenreGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Genre. */
export type GenreConnection = {
  __typename?: 'GenreConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GenreEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Genre>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GenreEdge = {
  __typename?: 'GenreEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Genre>;
};



/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type Mutation = {
  __typename?: 'Mutation';
  /** Add a game to the current user's library. */
  addGameToLibrary?: Maybe<AddGameToLibraryPayload>;
  /** Ban a user. **Only available to moderators and admins.** */
  banUser?: Maybe<BanUserPayload>;
  /** Delete an event from the Activity Feed. You must be the owner of the event to delete it. */
  deleteEvent?: Maybe<DeleteEventPayload>;
  /** Add a game to the current user's favorites. */
  favoriteGame?: Maybe<FavoriteGamePayload>;
  /** Follow a user. */
  followUser?: Maybe<FollowUserPayload>;
  /** Remove the cover from a game. **Only available to moderators and admins.** */
  removeGameCover?: Maybe<RemoveGameCoverPayload>;
  /** Remove a game from the current user's library. */
  removeGameFromLibrary?: Maybe<RemoveGameFromLibraryPayload>;
  /** Unban a user. **Only available to moderators and admins.** */
  unbanUser?: Maybe<UnbanUserPayload>;
  /** Remove a game from the current user's favorites. */
  unfavoriteGame?: Maybe<UnfavoriteGamePayload>;
  /** Unfollow a user. */
  unfollowUser?: Maybe<UnfollowUserPayload>;
  /** Update a game in the current user's library. */
  updateGameInLibrary?: Maybe<UpdateGameInLibraryPayload>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationAddGameToLibraryArgs = {
  comments?: Maybe<Scalars['String']>;
  completionDate?: Maybe<Scalars['ISO8601Date']>;
  completionStatus?: Maybe<GamePurchaseCompletionStatus>;
  gameId: Scalars['ID'];
  hoursPlayed?: Maybe<Scalars['Float']>;
  platforms?: Maybe<Array<Maybe<Scalars['ID']>>>;
  rating?: Maybe<Scalars['Int']>;
  replayCount?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['ISO8601Date']>;
  stores?: Maybe<Array<Maybe<Scalars['ID']>>>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationBanUserArgs = {
  userId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationDeleteEventArgs = {
  eventId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationFavoriteGameArgs = {
  gameId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationFollowUserArgs = {
  userId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationRemoveGameCoverArgs = {
  gameId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationRemoveGameFromLibraryArgs = {
  gameId?: Maybe<Scalars['ID']>;
  gamePurchaseId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUnbanUserArgs = {
  userId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUnfavoriteGameArgs = {
  gameId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUnfollowUserArgs = {
  userId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUpdateGameInLibraryArgs = {
  comments?: Maybe<Scalars['String']>;
  completionDate?: Maybe<Scalars['ISO8601Date']>;
  completionStatus?: Maybe<GamePurchaseCompletionStatus>;
  gamePurchaseId: Scalars['ID'];
  hoursPlayed?: Maybe<Scalars['Float']>;
  platforms?: Maybe<Array<Maybe<Scalars['ID']>>>;
  rating?: Maybe<Scalars['Int']>;
  replayCount?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['ISO8601Date']>;
  stores?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** The max page size for a given set of nodes. */
  pageSize: Scalars['Int'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** Video game platforms, usually consoles or PC operating systems. */
export type Platform = {
  __typename?: 'Platform';
  /** When this platform was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games available on this platform. */
  games?: Maybe<GameConnection>;
  /** ID of the platform. */
  id: Scalars['ID'];
  /** Name of the platform. */
  name: Scalars['String'];
  /** When this platform was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Identifier for Wikidata. */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game platforms, usually consoles or PC operating systems. */
export type PlatformGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Platform. */
export type PlatformConnection = {
  __typename?: 'PlatformConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PlatformEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Platform>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PlatformEdge = {
  __typename?: 'PlatformEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Platform>;
};

/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type Query = {
  __typename?: 'Query';
  /** View recent activity. */
  activity?: Maybe<EventConnection>;
  /**
   * Current, basic site statistics for the home page. These values are
   * cached for 30 minutes and so won't necessarily represent the live
   * values.
   */
  basicSiteStatistics: BasicSiteStatistic;
  /** List all companies. */
  companies?: Maybe<CompanyConnection>;
  /** Find a company by ID. */
  company?: Maybe<Company>;
  /** Find a company by searching based on its name. */
  companySearch?: Maybe<CompanyConnection>;
  /** Get the currently authenticated user. */
  currentUser?: Maybe<User>;
  /** Find a game engine by ID. */
  engine?: Maybe<Engine>;
  /** Find a game engine by searching based on its name. */
  engineSearch?: Maybe<EngineConnection>;
  /** List all game engines. */
  engines?: Maybe<EngineConnection>;
  /** Find a game by ID or one of its external IDs. May only use one of the filters at a time. */
  game?: Maybe<Game>;
  /** Find a game purchase by ID. */
  gamePurchase?: Maybe<GamePurchase>;
  /** Find a game by searching based on its name. */
  gameSearch?: Maybe<GameConnection>;
  /** List all games. */
  games?: Maybe<GameConnection>;
  /** Find a genre by ID. */
  genre?: Maybe<Genre>;
  /** Find a genre by searching based on its name. */
  genreSearch?: Maybe<GenreConnection>;
  /** List all genres. */
  genres?: Maybe<GenreConnection>;
  /** Find a platform by ID. */
  platform?: Maybe<Platform>;
  /** Find a platform by searching based on its name. */
  platformSearch?: Maybe<PlatformConnection>;
  /** List all platforms. */
  platforms?: Maybe<PlatformConnection>;
  /** Find a series by ID. */
  series?: Maybe<Series>;
  /** List all series'. This is different from the other list queries because series is the plural of series. :( */
  seriesList?: Maybe<SeriesConnection>;
  /** Find a series by searching based on its name. */
  seriesSearch?: Maybe<SeriesConnection>;
  /** List all statistics. **Only available to admins.** */
  siteStatistics?: Maybe<SiteStatisticConnection>;
  /** List all steam blocklist entries. **Only available to admins.** */
  steamBlocklist?: Maybe<SteamBlocklistEntryConnection>;
  /** Find a store by ID. */
  store?: Maybe<Store>;
  /** Find a store by searching based on its name. */
  storeSearch?: Maybe<StoreConnection>;
  /** List all stores. */
  stores?: Maybe<StoreConnection>;
  /** Find a user. May only use one argument at a time. */
  user?: Maybe<User>;
  /** Find a user by searching based on its username. */
  userSearch?: Maybe<UserConnection>;
  /** List all users. */
  users?: Maybe<UserConnection>;
  /** List all Wikidata blocklist entries. **Only available to admins.** */
  wikidataBlocklist?: Maybe<WikidataBlocklistEntryConnection>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryActivityArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  feedType?: Maybe<ActivityFeed>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryCompaniesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryCompanyArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryCompanySearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryEngineArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryEngineSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryEnginesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGameArgs = {
  epicGamesStoreId?: Maybe<Scalars['String']>;
  giantbombId?: Maybe<Scalars['String']>;
  gogId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  igdbId?: Maybe<Scalars['String']>;
  mobygamesId?: Maybe<Scalars['String']>;
  pcgamingwikiId?: Maybe<Scalars['String']>;
  steamAppId?: Maybe<Scalars['Int']>;
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGamePurchaseArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGameSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  byYear?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  onPlatform?: Maybe<Scalars['ID']>;
  sortBy?: Maybe<GameSort>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGenreArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGenreSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGenresArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryPlatformArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryPlatformSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryPlatformsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySeriesArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySeriesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySeriesSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySiteStatisticsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySteamBlocklistArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryStoreArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryStoreSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryStoresArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryUserArgs = {
  id?: Maybe<Scalars['ID']>;
  slug?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryUserSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryUsersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryWikidataBlocklistArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** This represents the relationship between two users, where one user is following another. */
export type Relationship = {
  __typename?: 'Relationship';
  /** When this relationship was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The user being followed. */
  followed: User;
  /** The user that's following the other. */
  follower: User;
  /** ID of the relationship. */
  id: Scalars['ID'];
  /** When this relationship was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
};

/** Autogenerated return type of RemoveGameCover */
export type RemoveGameCoverPayload = {
  __typename?: 'RemoveGameCoverPayload';
  /** The game thats cover was removed. */
  game: Game;
};

/** Autogenerated return type of RemoveGameFromLibrary */
export type RemoveGameFromLibraryPayload = {
  __typename?: 'RemoveGameFromLibraryPayload';
  /** The game being removed from the user's library. */
  game?: Maybe<Game>;
};

/** Video game series' */
export type Series = {
  __typename?: 'Series';
  /** When this series was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games in this series. */
  games?: Maybe<GameConnection>;
  /** ID of the series. */
  id: Scalars['ID'];
  /** Name of the series. */
  name: Scalars['String'];
  /** When this series was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Identifier for Wikidata. */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game series' */
export type SeriesGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Series. */
export type SeriesConnection = {
  __typename?: 'SeriesConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SeriesEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Series>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SeriesEdge = {
  __typename?: 'SeriesEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Series>;
};

/**
 * Historical site statistics for vglist. Most of these values cannot be
 * `null`, but some may be if you go back far enough. Make sure to handle
 * `null` where necessary.
 */
export type SiteStatistic = {
  __typename?: 'SiteStatistic';
  /** The number of Banned Users at this point in time. */
  bannedUsers: Scalars['Int'];
  /** The number of Companies at this point in time. */
  companies: Scalars['Int'];
  /** The number of Company Versions at this point in time. */
  companyVersions?: Maybe<Scalars['Int']>;
  /** The number of Engine Versions at this point in time. */
  engineVersions?: Maybe<Scalars['Int']>;
  /** The number of Engines at this point in time. */
  engines: Scalars['Int'];
  /** The number of Epic Games Store IDs at this point in time. */
  epicGamesStoreIds: Scalars['Int'];
  /** The number of Events at this point in time. */
  events: Scalars['Int'];
  /** The number of Game Purchases at this point in time. */
  gamePurchases: Scalars['Int'];
  /** The number of Game Versions at this point in time. */
  gameVersions?: Maybe<Scalars['Int']>;
  /** The number of Games at this point in time. */
  games: Scalars['Int'];
  /** The number of Games with covers at this point in time. */
  gamesWithCovers: Scalars['Int'];
  /** The number of Games with release dates at this point in time. */
  gamesWithReleaseDates: Scalars['Int'];
  /** The number of Genre Versions at this point in time. */
  genreVersions?: Maybe<Scalars['Int']>;
  /** The number of Genres at this point in time. */
  genres: Scalars['Int'];
  /** The number of GiantBomb IDs at this point in time. */
  giantbombIds: Scalars['Int'];
  /** The number of GOG.com IDs at this point in time. */
  gogIds: Scalars['Int'];
  /** ID of the statistic record. */
  id: Scalars['ID'];
  /** The number of IGDB IDs at this point in time. */
  igdbIds?: Maybe<Scalars['Int']>;
  /** The number of MobyGames IDs at this point in time. */
  mobygamesIds: Scalars['Int'];
  /** The number of PCGamingWiki IDs at this point in time. */
  pcgamingwikiIds: Scalars['Int'];
  /** The number of Platform Versions at this point in time. */
  platformVersions?: Maybe<Scalars['Int']>;
  /** The number of Platforms at this point in time. */
  platforms: Scalars['Int'];
  /** The number of Relationships at this point in time. */
  relationships: Scalars['Int'];
  /** The number of Series at this point in time. */
  series: Scalars['Int'];
  /** The number of Series Versions at this point in time. */
  seriesVersions?: Maybe<Scalars['Int']>;
  /** The number of Steam App IDs at this point in time. */
  steamAppIds: Scalars['Int'];
  /** The number of Stores at this point in time. */
  stores: Scalars['Int'];
  /** The point in time at which these statistics were logged, always UTC. */
  timestamp: Scalars['ISO8601DateTime'];
  /** The number of Users at this point in time. */
  users: Scalars['Int'];
  /** The number of Wikidata IDs at this point in time. */
  wikidataIds: Scalars['Int'];
};

/** The connection type for SiteStatistic. */
export type SiteStatisticConnection = {
  __typename?: 'SiteStatisticConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SiteStatisticEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SiteStatistic>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SiteStatisticEdge = {
  __typename?: 'SiteStatisticEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<SiteStatistic>;
};

/**
 * Entries in the Steam Blocklist, for blocking the creation of games with a
 * given Steam App ID. Mainly used for things we don't want to track, such
 * as DLC or non-game Steam applications.
 */
export type SteamBlocklistEntry = {
  __typename?: 'SteamBlocklistEntry';
  /** When this blocklist entry was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** ID of the Steam Blocklist entry. */
  id: Scalars['ID'];
  /** Name of the game that has been blocked. */
  name: Scalars['String'];
  /** The blocked Steam App ID. */
  steamAppId: Scalars['Int'];
  /** When this blocklist entry was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** User that created this blocklist entry, can be null if the user deleted their account. */
  user?: Maybe<User>;
};

/** The connection type for SteamBlocklistEntry. */
export type SteamBlocklistEntryConnection = {
  __typename?: 'SteamBlocklistEntryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SteamBlocklistEntryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SteamBlocklistEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SteamBlocklistEntryEdge = {
  __typename?: 'SteamBlocklistEntryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<SteamBlocklistEntry>;
};

/** Stores where video games are sold, e.g. Steam or the Epic Games Store */
export type Store = {
  __typename?: 'Store';
  /** When this store was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** ID of the store. */
  id: Scalars['ID'];
  /** Name of the store. */
  name: Scalars['String'];
  /** When this store was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for Store. */
export type StoreConnection = {
  __typename?: 'StoreConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StoreEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Store>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type StoreEdge = {
  __typename?: 'StoreEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Store>;
};

/** Autogenerated return type of UnbanUser */
export type UnbanUserPayload = {
  __typename?: 'UnbanUserPayload';
  /** The user that has been unbanned. */
  user?: Maybe<User>;
};

/** Autogenerated return type of UnfavoriteGame */
export type UnfavoriteGamePayload = {
  __typename?: 'UnfavoriteGamePayload';
  /** The game being unfavorited. */
  game?: Maybe<Game>;
};

/** Autogenerated return type of UnfollowUser */
export type UnfollowUserPayload = {
  __typename?: 'UnfollowUserPayload';
  /** The user being unfollowed. */
  user?: Maybe<User>;
};

/** Autogenerated return type of UpdateGameInLibrary */
export type UpdateGameInLibraryPayload = {
  __typename?: 'UpdateGameInLibraryPayload';
  /** The game purchase being updated in the user's library. */
  gamePurchase?: Maybe<GamePurchase>;
};

/** User accounts on vglist */
export type User = {
  __typename?: 'User';
  /** Activity Events that refer to this user. */
  activity?: Maybe<EventConnection>;
  /** URL for the user's avatar image. `null` means the user has the default avatar. */
  avatarUrl?: Maybe<Scalars['String']>;
  /** Whether this user has been banned. */
  banned: Scalars['Boolean'];
  /** User profile description, aka 'bio'. */
  bio?: Maybe<Scalars['String']>;
  /** When this user was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games that this user has favorited. */
  favoritedGames?: Maybe<GameConnection>;
  /** Users that are following this user. */
  followers?: Maybe<UserConnection>;
  /** Users that this user is following. */
  following?: Maybe<UserConnection>;
  /** Games in this user's library. */
  gamePurchases?: Maybe<GamePurchaseConnection>;
  /** ID of the user. */
  id: Scalars['ID'];
  /** The user's level of privacy. */
  privacy: UserPrivacy;
  /** User permission level. */
  role: UserRole;
  /** The user's slug, used for their profile URL. */
  slug: Scalars['String'];
  /** When this user was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Username of the user. */
  username: Scalars['String'];
};


/** User accounts on vglist */
export type UserActivityArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** User accounts on vglist */
export type UserAvatarUrlArgs = {
  size?: Maybe<UserAvatarSize>;
};


/** User accounts on vglist */
export type UserFavoritedGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** User accounts on vglist */
export type UserFollowersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** User accounts on vglist */
export type UserFollowingArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** User accounts on vglist */
export type UserGamePurchasesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The size of the user avatar. */
export enum UserAvatarSize {
  /** User avatar image with a width of 300 and height of 300. */
  Large = 'LARGE',
  /** User avatar image with a width of 150 and height of 150. */
  Medium = 'MEDIUM',
  /** User avatar image with a width of 80 and height of 80. */
  Small = 'SMALL'
}

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

/** An enum describing the privacy level of a given user. Most users will be `PUBLIC_ACCOUNT`. */
export enum UserPrivacy {
  /** User has a private profile. */
  PrivateAccount = 'PRIVATE_ACCOUNT',
  /** User has a publicly-visible profile. */
  PublicAccount = 'PUBLIC_ACCOUNT'
}

/** Roles that a user can have, these define permissions levels. Most users will be `MEMBER`. */
export enum UserRole {
  /** User is an admin and has the highest permissions. */
  Admin = 'ADMIN',
  /** User is a regular user. */
  Member = 'MEMBER',
  /** User has some heightened permissions. */
  Moderator = 'MODERATOR'
}

/**
 * Entries in the Wikidata Blocklist, for blocking the creation of games
 * with a given Wikidata ID. Mainly used for things we don't want to track,
 * such as DLC or things that aren't _really_ games but are declared as
 * games in Wikidata.
 */
export type WikidataBlocklistEntry = {
  __typename?: 'WikidataBlocklistEntry';
  /** When this blocklist entry was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** ID of the Wikidata Blocklist entry. */
  id: Scalars['ID'];
  /** Name of the game that has been blocked. */
  name: Scalars['String'];
  /** When this blocklist entry was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** User that created this blocklist entry, can be null if the user deleted their account. */
  user?: Maybe<User>;
  /** The blocked Wikidata ID. */
  wikidataId: Scalars['Int'];
};

/** The connection type for WikidataBlocklistEntry. */
export type WikidataBlocklistEntryConnection = {
  __typename?: 'WikidataBlocklistEntryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<WikidataBlocklistEntryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<WikidataBlocklistEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type WikidataBlocklistEntryEdge = {
  __typename?: 'WikidataBlocklistEntryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<WikidataBlocklistEntry>;
};

export type ActivityFeedQueryVariables = Exact<{
  feedType?: Maybe<ActivityFeed>;
  beforeCursor?: Maybe<Scalars['String']>;
  afterCursor?: Maybe<Scalars['String']>;
}>;


export type ActivityFeedQuery = (
  { __typename?: 'Query' }
  & { activity?: Maybe<(
    { __typename?: 'EventConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Event' }
      & EventCardFieldsFragment
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type CompaniesQueryVariables = Exact<{
  cursor: Scalars['String'];
}>;


export type CompaniesQuery = (
  { __typename?: 'Query' }
  & { companies?: Maybe<(
    { __typename?: 'CompanyConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Company' }
      & Pick<Company, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type CompanyQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type CompanyQuery = (
  { __typename?: 'Query' }
  & { company?: Maybe<(
    { __typename?: 'Company' }
    & Pick<Company, 'id' | 'name' | 'wikidataId'>
    & { developedGames?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )>, publishedGames?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type EngineQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type EngineQuery = (
  { __typename?: 'Query' }
  & { engine?: Maybe<(
    { __typename?: 'Engine' }
    & Pick<Engine, 'id' | 'name' | 'wikidataId'>
    & { games?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type EnginesQueryVariables = Exact<{
  cursor: Scalars['String'];
}>;


export type EnginesQuery = (
  { __typename?: 'Query' }
  & { engines?: Maybe<(
    { __typename?: 'EngineConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Engine' }
      & Pick<Engine, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type GameQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GameQuery = (
  { __typename?: 'Query' }
  & { game?: Maybe<(
    { __typename?: 'Game' }
    & Pick<Game, 'id' | 'name' | 'releaseDate' | 'coverUrl' | 'avgRating' | 'wikidataId' | 'igdbId' | 'gogId' | 'steamAppIds' | 'epicGamesStoreId' | 'mobygamesId' | 'pcgamingwikiId' | 'giantbombId' | 'isFavorited' | 'isInLibrary'>
    & { genres?: Maybe<(
      { __typename?: 'GenreConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Genre' }
        & Pick<Genre, 'id' | 'name'>
      )>>> }
    )>, platforms?: Maybe<(
      { __typename?: 'PlatformConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Platform' }
        & Pick<Platform, 'id' | 'name'>
      )>>> }
    )>, series?: Maybe<(
      { __typename?: 'Series' }
      & Pick<Series, 'id' | 'name'>
    )>, developers?: Maybe<(
      { __typename?: 'CompanyConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Company' }
        & Pick<Company, 'id' | 'name'>
      )>>> }
    )>, publishers?: Maybe<(
      { __typename?: 'CompanyConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Company' }
        & Pick<Company, 'id' | 'name'>
      )>>> }
    )>, engines?: Maybe<(
      { __typename?: 'EngineConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Engine' }
        & Pick<Engine, 'id' | 'name'>
      )>>> }
    )>, owners?: Maybe<(
      { __typename?: 'UserConnection' }
      & Pick<UserConnection, 'totalCount'>
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'id' | 'username' | 'slug' | 'avatarUrl'>
      )>>> }
    )>, favoriters?: Maybe<(
      { __typename?: 'UserConnection' }
      & Pick<UserConnection, 'totalCount'>
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'id' | 'username' | 'slug' | 'avatarUrl'>
      )>>> }
    )> }
  )> }
);

export type GamesQueryVariables = Exact<{
  cursor: Scalars['String'];
}>;


export type GamesQuery = (
  { __typename?: 'Query' }
  & { games?: Maybe<(
    { __typename?: 'GameConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Game' }
      & GameCardFieldsFragment
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type GenreQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GenreQuery = (
  { __typename?: 'Query' }
  & { genre?: Maybe<(
    { __typename?: 'Genre' }
    & Pick<Genre, 'id' | 'name' | 'wikidataId'>
    & { games?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type GenresQueryVariables = Exact<{
  cursor: Scalars['String'];
}>;


export type GenresQuery = (
  { __typename?: 'Query' }
  & { genres?: Maybe<(
    { __typename?: 'GenreConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Genre' }
      & Pick<Genre, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type HomeStatisticsQueryVariables = Exact<{ [key: string]: never; }>;


export type HomeStatisticsQuery = (
  { __typename?: 'Query' }
  & { basicSiteStatistics: (
    { __typename?: 'BasicSiteStatistic' }
    & Pick<BasicSiteStatistic, 'companies' | 'engines' | 'games' | 'genres' | 'platforms' | 'series'>
  ) }
);

export type PlatformQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type PlatformQuery = (
  { __typename?: 'Query' }
  & { platform?: Maybe<(
    { __typename?: 'Platform' }
    & Pick<Platform, 'id' | 'name' | 'wikidataId'>
    & { games?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type PlatformsQueryVariables = Exact<{
  cursor: Scalars['String'];
}>;


export type PlatformsQuery = (
  { __typename?: 'Query' }
  & { platforms?: Maybe<(
    { __typename?: 'PlatformConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Platform' }
      & Pick<Platform, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type SeriesQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type SeriesQuery = (
  { __typename?: 'Query' }
  & { series?: Maybe<(
    { __typename?: 'Series' }
    & Pick<Series, 'id' | 'name' | 'wikidataId'>
    & { games?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type SeriesListQueryVariables = Exact<{
  cursor: Scalars['String'];
}>;


export type SeriesListQuery = (
  { __typename?: 'Query' }
  & { seriesList?: Maybe<(
    { __typename?: 'SeriesConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Series' }
      & Pick<Series, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type StoreQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type StoreQuery = (
  { __typename?: 'Query' }
  & { store?: Maybe<(
    { __typename?: 'Store' }
    & Pick<Store, 'id' | 'name'>
  )> }
);

export type StoresQueryVariables = Exact<{
  cursor: Scalars['String'];
}>;


export type StoresQuery = (
  { __typename?: 'Query' }
  & { stores?: Maybe<(
    { __typename?: 'StoreConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Store' }
      & Pick<Store, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type UserQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type UserQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'username' | 'slug' | 'bio' | 'avatarUrl' | 'privacy' | 'banned' | 'role'>
    & { followers?: Maybe<(
      { __typename?: 'UserConnection' }
      & Pick<UserConnection, 'totalCount'>
    )>, following?: Maybe<(
      { __typename?: 'UserConnection' }
      & Pick<UserConnection, 'totalCount'>
    )> }
  )> }
);

export type UserActivityQueryVariables = Exact<{
  userId: Scalars['ID'];
  cursor: Scalars['String'];
}>;


export type UserActivityQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & { activity?: Maybe<(
      { __typename?: 'EventConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Event' }
        & EventCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type UserFavoritesQueryVariables = Exact<{
  userId: Scalars['ID'];
  cursor: Scalars['String'];
}>;


export type UserFavoritesQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & { favoritedGames?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type UserFollowersQueryVariables = Exact<{
  userId: Scalars['ID'];
  cursor: Scalars['String'];
}>;


export type UserFollowersQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & { followers?: Maybe<(
      { __typename?: 'UserConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'User' }
        & UserCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type UserFollowingQueryVariables = Exact<{
  userId: Scalars['ID'];
  cursor: Scalars['String'];
}>;


export type UserFollowingQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & { following?: Maybe<(
      { __typename?: 'UserConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'User' }
        & UserCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type UsersQueryVariables = Exact<{
  cursor: Scalars['String'];
}>;


export type UsersQuery = (
  { __typename?: 'Query' }
  & { users?: Maybe<(
    { __typename?: 'UserConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'User' }
      & UserCardFieldsFragment
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type EventCardFieldsFragment = (
  { __typename?: 'Event' }
  & Pick<Event, 'id' | 'eventCategory' | 'createdAt'>
  & { user: (
    { __typename?: 'User' }
    & Pick<User, 'slug' | 'username' | 'avatarUrl'>
  ), eventable: (
    { __typename: 'FavoriteGame' }
    & { game: (
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    ) }
  ) | (
    { __typename: 'GamePurchase' }
    & { game: (
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    ) }
  ) | (
    { __typename: 'Relationship' }
    & { followed: (
      { __typename?: 'User' }
      & Pick<User, 'username' | 'slug'>
    ) }
  ) | (
    { __typename: 'User' }
    & Pick<User, 'slug' | 'username'>
  ) }
);

export type GameCardFieldsFragment = (
  { __typename?: 'Game' }
  & Pick<Game, 'id' | 'name' | 'coverUrl' | 'isFavorited'>
  & { platforms?: Maybe<(
    { __typename?: 'PlatformConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Platform' }
      & Pick<Platform, 'name'>
    )>>> }
  )>, developers?: Maybe<(
    { __typename?: 'CompanyConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Company' }
      & Pick<Company, 'name'>
    )>>> }
  )> }
);

export type PaginationFieldsFragment = (
  { __typename?: 'PageInfo' }
  & Pick<PageInfo, 'hasPreviousPage' | 'hasNextPage' | 'startCursor' | 'endCursor'>
);

export type UserCardFieldsFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'username' | 'slug' | 'bio' | 'avatarUrl' | 'privacy' | 'banned' | 'role'>
  & { gamePurchases?: Maybe<(
    { __typename?: 'GamePurchaseConnection' }
    & Pick<GamePurchaseConnection, 'totalCount'>
  )> }
);

export type DeleteEventMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteEventMutation = (
  { __typename?: 'Mutation' }
  & { deleteEvent?: Maybe<(
    { __typename?: 'DeleteEventPayload' }
    & Pick<DeleteEventPayload, 'deleted'>
  )> }
);

export type FavoriteGameMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type FavoriteGameMutation = (
  { __typename?: 'Mutation' }
  & { favoriteGame?: Maybe<(
    { __typename?: 'FavoriteGamePayload' }
    & { game?: Maybe<(
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    )> }
  )> }
);

export type UnfavoriteGameMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type UnfavoriteGameMutation = (
  { __typename?: 'Mutation' }
  & { unfavoriteGame?: Maybe<(
    { __typename?: 'UnfavoriteGamePayload' }
    & { game?: Maybe<(
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    )> }
  )> }
);

export const EventCardFieldsFragmentDoc: DocumentNode<EventCardFieldsFragment, unknown> = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"eventCardFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Event"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"eventCategory"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"SMALL"}}]}]}},{"kind":"Field","name":{"kind":"Name","value":"eventable"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GamePurchase"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Relationship"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"followed"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FavoriteGame"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]};
export const GameCardFieldsFragmentDoc: DocumentNode<GameCardFieldsFragment, unknown> = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"gameCardFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Game"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"coverUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"MEDIUM"}}]},{"kind":"Field","name":{"kind":"Name","value":"platforms"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"3"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"developers"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"3"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"isFavorited"}}]}}]};
export const PaginationFieldsFragmentDoc: DocumentNode<PaginationFieldsFragment, unknown> = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"paginationFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"PageInfo"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hasPreviousPage"}},{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"startCursor"}},{"kind":"Field","name":{"kind":"Name","value":"endCursor"}}]}}]};
export const UserCardFieldsFragmentDoc: DocumentNode<UserCardFieldsFragment, unknown> = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"userCardFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"bio"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"MEDIUM"}}]},{"kind":"Field","name":{"kind":"Name","value":"privacy"}},{"kind":"Field","name":{"kind":"Name","value":"banned"}},{"kind":"Field","name":{"kind":"Name","value":"role"}},{"kind":"Field","name":{"kind":"Name","value":"gamePurchases"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]};
export const ActivityFeedDocument: DocumentNode<ActivityFeedQuery, ActivityFeedQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ActivityFeed"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"feedType"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ActivityFeed"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"beforeCursor"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"afterCursor"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activity"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"feedType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"feedType"}}},{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"beforeCursor"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"afterCursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"eventCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...EventCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const CompaniesDocument: DocumentNode<CompaniesQuery, CompaniesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Companies"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"companies"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const CompanyDocument: DocumentNode<CompanyQuery, CompanyQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Company"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"company"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"developedGames"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"publishedGames"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const EngineDocument: DocumentNode<EngineQuery, EngineQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Engine"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"engine"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"games"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const EnginesDocument: DocumentNode<EnginesQuery, EnginesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Engines"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"engines"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const GameDocument: DocumentNode<GameQuery, GameQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Game"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"releaseDate"}},{"kind":"Field","name":{"kind":"Name","value":"coverUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"LARGE"}}]},{"kind":"Field","name":{"kind":"Name","value":"avgRating"}},{"kind":"Field","name":{"kind":"Name","value":"genres"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"platforms"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"series"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"developers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"publishers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"engines"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"owners"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"SMALL"}}]}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"favoriters"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"SMALL"}}]}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"igdbId"}},{"kind":"Field","name":{"kind":"Name","value":"gogId"}},{"kind":"Field","name":{"kind":"Name","value":"steamAppIds"}},{"kind":"Field","name":{"kind":"Name","value":"epicGamesStoreId"}},{"kind":"Field","name":{"kind":"Name","value":"mobygamesId"}},{"kind":"Field","name":{"kind":"Name","value":"pcgamingwikiId"}},{"kind":"Field","name":{"kind":"Name","value":"giantbombId"}},{"kind":"Field","name":{"kind":"Name","value":"isFavorited"}},{"kind":"Field","name":{"kind":"Name","value":"isInLibrary"}}]}}]}}]};
export const GamesDocument: DocumentNode<GamesQuery, GamesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Games"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"games"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const GenreDocument: DocumentNode<GenreQuery, GenreQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Genre"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"genre"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"games"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const GenresDocument: DocumentNode<GenresQuery, GenresQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Genres"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"genres"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const HomeStatisticsDocument: DocumentNode<HomeStatisticsQuery, HomeStatisticsQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"HomeStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"basicSiteStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"companies"}},{"kind":"Field","name":{"kind":"Name","value":"engines"}},{"kind":"Field","name":{"kind":"Name","value":"games"}},{"kind":"Field","name":{"kind":"Name","value":"genres"}},{"kind":"Field","name":{"kind":"Name","value":"platforms"}},{"kind":"Field","name":{"kind":"Name","value":"series"}}]}}]}}]};
export const PlatformDocument: DocumentNode<PlatformQuery, PlatformQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Platform"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"platform"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"games"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const PlatformsDocument: DocumentNode<PlatformsQuery, PlatformsQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Platforms"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"platforms"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const SeriesDocument: DocumentNode<SeriesQuery, SeriesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Series"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"series"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"games"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const SeriesListDocument: DocumentNode<SeriesListQuery, SeriesListQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SeriesList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"seriesList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const StoreDocument: DocumentNode<StoreQuery, StoreQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Store"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]};
export const StoresDocument: DocumentNode<StoresQuery, StoresQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Stores"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stores"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const UserDocument: DocumentNode<UserQuery, UserQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"User"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"bio"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"MEDIUM"}}]},{"kind":"Field","name":{"kind":"Name","value":"privacy"}},{"kind":"Field","name":{"kind":"Name","value":"banned"}},{"kind":"Field","name":{"kind":"Name","value":"role"}},{"kind":"Field","name":{"kind":"Name","value":"followers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"following"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]};
export const UserActivityDocument: DocumentNode<UserActivityQuery, UserActivityQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserActivity"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activity"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"eventCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...EventCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const UserFavoritesDocument: DocumentNode<UserFavoritesQuery, UserFavoritesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserFavorites"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"favoritedGames"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const UserFollowersDocument: DocumentNode<UserFollowersQuery, UserFollowersQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserFollowers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"followers"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"userCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...UserCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const UserFollowingDocument: DocumentNode<UserFollowingQuery, UserFollowingQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserFollowing"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"following"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"userCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...UserCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const UsersDocument: DocumentNode<UsersQuery, UsersQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Users"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"users"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"userCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...UserCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const DeleteEventDocument: DocumentNode<DeleteEventMutation, DeleteEventMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteEvent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteEvent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"eventId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const FavoriteGameDocument: DocumentNode<FavoriteGameMutation, FavoriteGameMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"FavoriteGame"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"favoriteGame"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gameId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};
export const UnfavoriteGameDocument: DocumentNode<UnfavoriteGameMutation, UnfavoriteGameMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UnfavoriteGame"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"unfavoriteGame"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gameId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};