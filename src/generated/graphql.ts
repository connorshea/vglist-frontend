import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: any;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Options for filtering events in the activity feed. */
export enum ActivityFeed {
  /** Events from the current user and anyone they follow. */
  Following = 'FOLLOWING',
  /** Events from everyone. */
  Global = 'GLOBAL'
}

/** Autogenerated return type of AddGameToLibrary */
export type AddGameToLibraryPayload = {
  __typename?: 'AddGameToLibraryPayload';
  /** The game purchase that's been added to the user's library. */
  gamePurchase?: Maybe<GamePurchase>;
};

/** Autogenerated return type of AddToSteamBlocklist */
export type AddToSteamBlocklistPayload = {
  __typename?: 'AddToSteamBlocklistPayload';
  /** The Steam Blocklist entry that was created. */
  steamBlocklistEntry?: Maybe<SteamBlocklistEntry>;
};

/** Autogenerated return type of AddToWikidataBlocklist */
export type AddToWikidataBlocklistPayload = {
  __typename?: 'AddToWikidataBlocklistPayload';
  /** The Wikidata Blocklist entry that was created. */
  wikidataBlocklistEntry?: Maybe<WikidataBlocklistEntry>;
};

/** Autogenerated return type of BanUser */
export type BanUserPayload = {
  __typename?: 'BanUserPayload';
  /** The user that has been banned. */
  user?: Maybe<User>;
};

/** Basic site statistics. */
export type BasicSiteStatistic = {
  __typename?: 'BasicSiteStatistic';
  /** The current number of Companies. */
  companies: Scalars['Int'];
  /** The current number of Engines. */
  engines: Scalars['Int'];
  /** The current number of Games. */
  games: Scalars['Int'];
  /** The current number of Genres. */
  genres: Scalars['Int'];
  /** The current number of Platforms. */
  platforms: Scalars['Int'];
  /** The current number of Series'. */
  series: Scalars['Int'];
};

/** Video game developers and publishers */
export type Company = {
  __typename?: 'Company';
  /** When this company was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games developed by this company. */
  developedGames?: Maybe<GameConnection>;
  /** ID of the company. */
  id: Scalars['ID'];
  /** Name of the company. */
  name: Scalars['String'];
  /** Games published by this company. */
  publishedGames?: Maybe<GameConnection>;
  /** When this company was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Wikidata identifier */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game developers and publishers */
export type CompanyDevelopedGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video game developers and publishers */
export type CompanyPublishedGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Company. */
export type CompanyConnection = {
  __typename?: 'CompanyConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CompanyEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Company>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type CompanyEdge = {
  __typename?: 'CompanyEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Company>;
};

/** A company search result. */
export type CompanySearchResult = SearchResultInterface & {
  __typename?: 'CompanySearchResult';
  /** The contents of the search result, typically the name or username of the corresponding record. */
  content: Scalars['String'];
  /** The ID of the SearchResult record, probably not very useful most of the time. */
  id: Scalars['ID'];
  /** The ID of the corresponding record, e.g. the Game ID. */
  searchableId: Scalars['ID'];
  /** The type of the corresponding record. */
  searchableType: SearchableEnum;
};

/** Autogenerated return type of CreateCompany */
export type CreateCompanyPayload = {
  __typename?: 'CreateCompanyPayload';
  /** The company that was created. */
  company?: Maybe<Company>;
};

/** Autogenerated return type of CreateEngine */
export type CreateEnginePayload = {
  __typename?: 'CreateEnginePayload';
  /** The engine that was created. */
  engine?: Maybe<Engine>;
};

/** Autogenerated return type of CreateGenre */
export type CreateGenrePayload = {
  __typename?: 'CreateGenrePayload';
  /** The genre that was created. */
  genre?: Maybe<Genre>;
};

/** Autogenerated return type of CreatePlatform */
export type CreatePlatformPayload = {
  __typename?: 'CreatePlatformPayload';
  /** The platform that was created. */
  platform?: Maybe<Platform>;
};

/** Autogenerated return type of CreateSeries */
export type CreateSeriesPayload = {
  __typename?: 'CreateSeriesPayload';
  /** The series that was created. */
  series?: Maybe<Series>;
};

/** Autogenerated return type of CreateStore */
export type CreateStorePayload = {
  __typename?: 'CreateStorePayload';
  /** The store that was created. */
  store?: Maybe<Store>;
};

/** Autogenerated return type of DeleteCompany */
export type DeleteCompanyPayload = {
  __typename?: 'DeleteCompanyPayload';
  /** Whether the company was successfully deleted. */
  deleted?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of DeleteEngine */
export type DeleteEnginePayload = {
  __typename?: 'DeleteEnginePayload';
  /** Whether the engine was successfully deleted. */
  deleted?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of DeleteEvent */
export type DeleteEventPayload = {
  __typename?: 'DeleteEventPayload';
  /** Whether the event was deleted successfully or not. */
  deleted: Scalars['Boolean'];
};

/** Autogenerated return type of DeleteGame */
export type DeleteGamePayload = {
  __typename?: 'DeleteGamePayload';
  /** Whether the game was successfully deleted. */
  deleted?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of DeleteGenre */
export type DeleteGenrePayload = {
  __typename?: 'DeleteGenrePayload';
  /** Whether the genre was successfully deleted. */
  deleted?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of DeletePlatform */
export type DeletePlatformPayload = {
  __typename?: 'DeletePlatformPayload';
  /** Whether the platform was successfully deleted. */
  deleted?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of DeleteSeries */
export type DeleteSeriesPayload = {
  __typename?: 'DeleteSeriesPayload';
  /** Whether the series was successfully deleted. */
  deleted?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of DeleteStore */
export type DeleteStorePayload = {
  __typename?: 'DeleteStorePayload';
  /** Whether the store was successfully deleted. */
  deleted?: Maybe<Scalars['Boolean']>;
};

/** Video game engines */
export type Engine = {
  __typename?: 'Engine';
  /** When this engine was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games built with this engine. */
  games?: Maybe<GameConnection>;
  /** ID of the engine. */
  id: Scalars['ID'];
  /** Name of the engine. */
  name: Scalars['String'];
  /** When this engine was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Wikidata identifier */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game engines */
export type EngineGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Engine. */
export type EngineConnection = {
  __typename?: 'EngineConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EngineEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Engine>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type EngineEdge = {
  __typename?: 'EngineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Engine>;
};

/** An engine search result. */
export type EngineSearchResult = SearchResultInterface & {
  __typename?: 'EngineSearchResult';
  /** The contents of the search result, typically the name or username of the corresponding record. */
  content: Scalars['String'];
  /** The ID of the SearchResult record, probably not very useful most of the time. */
  id: Scalars['ID'];
  /** The ID of the corresponding record, e.g. the Game ID. */
  searchableId: Scalars['ID'];
  /** The type of the corresponding record. */
  searchableType: SearchableEnum;
};

/** Represents events in the Activity Feed. */
export type Event = {
  __typename?: 'Event';
  /** When this event was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The type of event. */
  eventCategory: EventCategory;
  /** The 'eventable' type that this event is about. This can be one of a number of different types, depending on the event. */
  eventable: EventableUnion;
  /** The ID of the event, keep in mind that Events - unlike all other models - use UUIDs. */
  id: Scalars['ID'];
  /** When this event was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** The user that this event is about. */
  user: User;
};

/** Category types for events in the Activity Feed. */
export enum EventCategory {
  /** Event for a user adding a game to their library. */
  AddToLibrary = 'ADD_TO_LIBRARY',
  /** Event for a user updating the completion status of a game. */
  ChangeCompletionStatus = 'CHANGE_COMPLETION_STATUS',
  /** Event for a user favoriting a game. */
  FavoriteGame = 'FAVORITE_GAME',
  /** Event for a user following another user. */
  Following = 'FOLLOWING',
  /** Event for user creation. */
  NewUser = 'NEW_USER'
}

/** The connection type for Event. */
export type EventConnection = {
  __typename?: 'EventConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EventEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Event>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Event>;
};

/** Objects which may be the subject of events. */
export type EventableUnion = FavoriteGame | GamePurchase | Relationship | User;

/** This represents a game that has been favorited by a user. */
export type FavoriteGame = {
  __typename?: 'FavoriteGame';
  /** When this game was first favorited. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The game being favorited. */
  game: Game;
  /** The ID of the FavoriteGame record. */
  id: Scalars['ID'];
  /** When this favorite game was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** The user that favorited the game. */
  user: User;
};

/** Autogenerated return type of FavoriteGame */
export type FavoriteGamePayload = {
  __typename?: 'FavoriteGamePayload';
  /** The game that was added to the user's library. */
  game?: Maybe<Game>;
};

/** Autogenerated return type of FollowUser */
export type FollowUserPayload = {
  __typename?: 'FollowUserPayload';
  /** The user being followed. */
  user?: Maybe<User>;
};

/** Video games */
export type Game = {
  __typename?: 'Game';
  /** The average rating from all users who own the game. */
  avgRating?: Maybe<Scalars['Float']>;
  /** URL for the game's cover image. `null` means the game has no associated cover. */
  coverUrl?: Maybe<Scalars['String']>;
  /** When this game was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Developers of the game. */
  developers?: Maybe<CompanyConnection>;
  /** Game engines that the game runs on. */
  engines?: Maybe<EngineConnection>;
  /** Identifier for the Epic Games Store. */
  epicGamesStoreId?: Maybe<Scalars['String']>;
  /** Users who have favorited this game. */
  favoriters?: Maybe<UserConnection>;
  /** The ID of the GamePurchase record if the game is in the current user's library, or `null` otherwise. */
  gamePurchaseId?: Maybe<Scalars['ID']>;
  /** Genres of the game. */
  genres?: Maybe<GenreConnection>;
  /** Identifier for Giant Bomb. */
  giantbombId?: Maybe<Scalars['String']>;
  /** Identifier for GOG.com. */
  gogId?: Maybe<Scalars['String']>;
  /** ID of the game. */
  id: Scalars['ID'];
  /** Identifier for Internet Game Database. */
  igdbId?: Maybe<Scalars['String']>;
  /** Whether the game is in the current user's favorites, or `null` if there is no logged-in user. */
  isFavorited?: Maybe<Scalars['Boolean']>;
  /** Whether the game is in the current user's library, or `null` if there is no logged-in user. */
  isInLibrary?: Maybe<Scalars['Boolean']>;
  /** Identifier for the MobyGames database. */
  mobygamesId?: Maybe<Scalars['String']>;
  /** Name of the game. */
  name: Scalars['String'];
  /** Users who have this game in their libraries. */
  owners?: Maybe<UserConnection>;
  /** Identifier for PCGamingWiki. */
  pcgamingwikiId?: Maybe<Scalars['String']>;
  /** Platforms the game is available on. */
  platforms?: Maybe<PlatformConnection>;
  /** Publishers of the game. */
  publishers?: Maybe<CompanyConnection>;
  /** The release date of the game. */
  releaseDate?: Maybe<Scalars['ISO8601Date']>;
  /** The series that the game belongs to. */
  series?: Maybe<Series>;
  /** Identifier for Steam games. Games can have more than one Steam App ID, but most will only have one. */
  steamAppIds?: Maybe<Array<Scalars['Int']>>;
  /** When this game was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Identifier for Wikidata. */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameCoverUrlArgs = {
  size?: Maybe<GameCoverSize>;
};


/** Video games */
export type GameDevelopersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameEnginesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameFavoritersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameGenresArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GameOwnersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GamePlatformsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Video games */
export type GamePublishersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Game. */
export type GameConnection = {
  __typename?: 'GameConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GameEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Game>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/**
 * The size of the game cover. Game covers are downsized to fit within the
 * specified dimensions while retaining the original aspect ratio. Will only resize
 * the image if it's larger than the specified dimensions.
 */
export enum GameCoverSize {
  /** Game cover image with a maximum width of 500 and maximum height of 800. */
  Large = 'LARGE',
  /** Game cover image with a maximum width of 300 and maximum height of 500. */
  Medium = 'MEDIUM',
  /** Game cover image with a maximum width of 200 and maximum height of 300. */
  Small = 'SMALL'
}

/** An edge in a connection. */
export type GameEdge = {
  __typename?: 'GameEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Game>;
};

/**
 * This represents a game that a user has in their library. It includes data like
 * the user's rating for the game, comments, hours played, etc.
 */
export type GamePurchase = {
  __typename?: 'GamePurchase';
  /** Comments about the game. */
  comments?: Maybe<Scalars['String']>;
  /** The date on which the user completed the game. */
  completionDate?: Maybe<Scalars['ISO8601Date']>;
  /** How far the user has gotten in the game. */
  completionStatus?: Maybe<GamePurchaseCompletionStatus>;
  /** When this game purchase was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The game represented by the Game Purchase. */
  game: Game;
  /** The number of hours the game has been played by the user, if any. */
  hoursPlayed?: Maybe<Scalars['Float']>;
  /** ID of the game purchase. */
  id: Scalars['ID'];
  /** Platforms that the user owns this game on. */
  platforms?: Maybe<PlatformConnection>;
  /** Rating out of 100. */
  rating?: Maybe<Scalars['Int']>;
  /** The number of times a game has been replayed. */
  replayCount: Scalars['Int'];
  /** The date on which the user started the game. */
  startDate?: Maybe<Scalars['ISO8601Date']>;
  /** Stores that the user owns this game on. */
  stores?: Maybe<StoreConnection>;
  /** When this game purchase was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** The owner of the Game Purchase. */
  user: User;
};


/**
 * This represents a game that a user has in their library. It includes data like
 * the user's rating for the game, comments, hours played, etc.
 */
export type GamePurchasePlatformsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/**
 * This represents a game that a user has in their library. It includes data like
 * the user's rating for the game, comments, hours played, etc.
 */
export type GamePurchaseStoresArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Completion Status options for game purchases (games in a user's library). */
export enum GamePurchaseCompletionStatus {
  /** The game has been completed. */
  Completed = 'COMPLETED',
  /** The game was dropped without being completed. */
  Dropped = 'DROPPED',
  /** The game is 100% complete, e.g. with all achievements unlocked. */
  FullyCompleted = 'FULLY_COMPLETED',
  /** The game is currently being played. */
  InProgress = 'IN_PROGRESS',
  /** The game cannot be completed. */
  NotApplicable = 'NOT_APPLICABLE',
  /** The game is incomplete and not being played, but the user intends to come back to play it again later. */
  Paused = 'PAUSED',
  /** The game is unplayed. */
  Unplayed = 'UNPLAYED'
}

/** The connection type for GamePurchase. */
export type GamePurchaseConnection = {
  __typename?: 'GamePurchaseConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GamePurchaseEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<GamePurchase>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GamePurchaseEdge = {
  __typename?: 'GamePurchaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<GamePurchase>;
};

/** A game search result. */
export type GameSearchResult = SearchResultInterface & {
  __typename?: 'GameSearchResult';
  /** The contents of the search result, typically the name or username of the corresponding record. */
  content: Scalars['String'];
  /** URL for the game's cover image. `null` means the game has no associated cover. */
  coverUrl?: Maybe<Scalars['String']>;
  /** The name of the game's developer, will choose the first if there are multiple developers. */
  developerName?: Maybe<Scalars['String']>;
  /** The ID of the SearchResult record, probably not very useful most of the time. */
  id: Scalars['ID'];
  /** The release date of the game, if one exists. */
  releaseDate?: Maybe<Scalars['ISO8601Date']>;
  /** The ID of the corresponding record, e.g. the Game ID. */
  searchableId: Scalars['ID'];
  /** The type of the corresponding record. */
  searchableType: SearchableEnum;
};


/** A game search result. */
export type GameSearchResultCoverUrlArgs = {
  size?: Maybe<GameCoverSize>;
};

/** Options for sorting games. */
export enum GameSort {
  /** Sorted by the games that have the highest average rating. */
  HighestAvgRating = 'HIGHEST_AVG_RATING',
  /** Sorted with most recently updated game records last. */
  LeastRecentlyUpdated = 'LEAST_RECENTLY_UPDATED',
  /** Sorted by the games that have been favorited the most times. */
  MostFavorites = 'MOST_FAVORITES',
  /** Sorted by the games that are in the most users' libraries. */
  MostOwners = 'MOST_OWNERS',
  /** Sorted with newest game records first. */
  Newest = 'NEWEST',
  /** Sorted with newest game records last. */
  Oldest = 'OLDEST',
  /** Sorted with the games that were most recently released first. */
  RecentlyReleased = 'RECENTLY_RELEASED',
  /** Sorted with most recently updated game records first. */
  RecentlyUpdated = 'RECENTLY_UPDATED'
}

/** Video game genres */
export type Genre = {
  __typename?: 'Genre';
  /** When this genre was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games in this genre. */
  games?: Maybe<GameConnection>;
  /** ID of the genre. */
  id: Scalars['ID'];
  /** Name of the genre. */
  name: Scalars['String'];
  /** When this genre was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Identifier for Wikidata. */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game genres */
export type GenreGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Genre. */
export type GenreConnection = {
  __typename?: 'GenreConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GenreEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Genre>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GenreEdge = {
  __typename?: 'GenreEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Genre>;
};

/** A genre search result. */
export type GenreSearchResult = SearchResultInterface & {
  __typename?: 'GenreSearchResult';
  /** The contents of the search result, typically the name or username of the corresponding record. */
  content: Scalars['String'];
  /** The ID of the SearchResult record, probably not very useful most of the time. */
  id: Scalars['ID'];
  /** The ID of the corresponding record, e.g. the Game ID. */
  searchableId: Scalars['ID'];
  /** The type of the corresponding record. */
  searchableType: SearchableEnum;
};



/** Autogenerated return type of MergeGames */
export type MergeGamesPayload = {
  __typename?: 'MergeGamesPayload';
  /** The resulting game that was kept after merging the two. */
  game: Game;
};

/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type Mutation = {
  __typename?: 'Mutation';
  /** Add a game to the current user's library. */
  addGameToLibrary?: Maybe<AddGameToLibraryPayload>;
  /**
   * Add game to Steam blocklist and remove the Steam App ID from any existing
   * games that have it. **Only available to admins using a first-party OAuth Application.**
   */
  addToSteamBlocklist?: Maybe<AddToSteamBlocklistPayload>;
  /**
   * Add game to Wikidata blocklist and remove Wikidata ID from any game that
   * current has it. **Only available to admins using a first-party OAuth Application.**
   */
  addToWikidataBlocklist?: Maybe<AddToWikidataBlocklistPayload>;
  /** Ban a user. **Only available to moderators and admins using a first-party OAuth Application.** */
  banUser?: Maybe<BanUserPayload>;
  /** Create a new game company. **Only available when using a first-party OAuth Application.** */
  createCompany?: Maybe<CreateCompanyPayload>;
  /** Create a new game engine. **Only available when using a first-party OAuth Application.** */
  createEngine?: Maybe<CreateEnginePayload>;
  /** Create a new game genre. **Only available to moderators and admins using a first-party OAuth Application.** */
  createGenre?: Maybe<CreateGenrePayload>;
  /** Create a new game platform. **Only available to moderators and admins using a first-party OAuth Application.** */
  createPlatform?: Maybe<CreatePlatformPayload>;
  /** Create a new game series. **Only available when using a first-party OAuth Application.** */
  createSeries?: Maybe<CreateSeriesPayload>;
  /** Create a new game store. **Only available when using a first-party OAuth Application.** */
  createStore?: Maybe<CreateStorePayload>;
  /** Delete a game company. **Only available to moderators and admins using a first-party OAuth Application.** */
  deleteCompany?: Maybe<DeleteCompanyPayload>;
  /** Delete a game engine. **Only available to moderators and admins using a first-party OAuth Application.** */
  deleteEngine?: Maybe<DeleteEnginePayload>;
  /** Delete an event from the Activity Feed. You must be the owner of the event to delete it. */
  deleteEvent?: Maybe<DeleteEventPayload>;
  /** Delete a game. **Only available to moderators and admins using a first-party OAuth Application.** */
  deleteGame?: Maybe<DeleteGamePayload>;
  /** Delete a game genre. **Only available to moderators and admins using a first-party OAuth Application.** */
  deleteGenre?: Maybe<DeleteGenrePayload>;
  /** Delete a game platform. **Only available to moderators and admins using a first-party OAuth Application.** */
  deletePlatform?: Maybe<DeletePlatformPayload>;
  /** Delete a game series. **Only available to moderators and admins using a first-party OAuth Application.** */
  deleteSeries?: Maybe<DeleteSeriesPayload>;
  /** Delete a game store. **Only available to moderators and admins using a first-party OAuth Application.** */
  deleteStore?: Maybe<DeleteStorePayload>;
  /** Add a game to the current user's favorites. */
  favoriteGame?: Maybe<FavoriteGamePayload>;
  /** Follow a user. */
  followUser?: Maybe<FollowUserPayload>;
  /**
   * Merge one game into another. Re-associates all favorites and game purchases
   * (if possible). **Only available to admins using a first-party OAuth Application.**
   */
  mergeGames?: Maybe<MergeGamesPayload>;
  /** Remove game from Steam blocklist. **Only available to admins using a first-party OAuth Application.** */
  removeFromSteamBlocklist?: Maybe<RemoveFromSteamBlocklistPayload>;
  /** Remove game from Wikidata blocklist. **Only available to admins using a first-party OAuth Application.** */
  removeFromWikidataBlocklist?: Maybe<RemoveFromWikidataBlocklistPayload>;
  /** Remove the cover from a game. **Only available to moderators and admins using a first-party OAuth Application.** */
  removeGameCover?: Maybe<RemoveGameCoverPayload>;
  /** Remove a game from the current user's library. */
  removeGameFromLibrary?: Maybe<RemoveGameFromLibraryPayload>;
  /** Remove the avatar from a user. **Only available when using a first-party OAuth application.** */
  removeUserAvatar?: Maybe<RemoveUserAvatarPayload>;
  /** Unban a user. **Only available to moderators and admins using a first-party OAuth Application.** */
  unbanUser?: Maybe<UnbanUserPayload>;
  /** Remove a game from the current user's favorites. */
  unfavoriteGame?: Maybe<UnfavoriteGamePayload>;
  /** Unfollow a user. */
  unfollowUser?: Maybe<UnfollowUserPayload>;
  /** Update an existing game company. **Only available when using a first-party OAuth Application.** */
  updateCompany?: Maybe<UpdateCompanyPayload>;
  /** Update an existing game engine. **Only available when using a first-party OAuth Application.** */
  updateEngine?: Maybe<UpdateEnginePayload>;
  /** Update a game in the current user's library. */
  updateGameInLibrary?: Maybe<UpdateGameInLibraryPayload>;
  /** Update an existing game genre. **Only available to moderators and admins using a first-party OAuth Application.** */
  updateGenre?: Maybe<UpdateGenrePayload>;
  /** Update an existing game platform. **Only available to moderators and admins using a first-party OAuth Application.** */
  updatePlatform?: Maybe<UpdatePlatformPayload>;
  /** Update an existing game series. **Only available when using a first-party OAuth Application.** */
  updateSeries?: Maybe<UpdateSeriesPayload>;
  /** Update an existing game store. **Only available to moderators and admins using a first-party OAuth Application.** */
  updateStore?: Maybe<UpdateStorePayload>;
  /** Update a user's role. **Only available to admins using a first-party OAuth Application.** */
  updateUserRole?: Maybe<UpdateUserRolePayload>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationAddGameToLibraryArgs = {
  comments?: Maybe<Scalars['String']>;
  completionDate?: Maybe<Scalars['ISO8601Date']>;
  completionStatus?: Maybe<GamePurchaseCompletionStatus>;
  gameId: Scalars['ID'];
  hoursPlayed?: Maybe<Scalars['Float']>;
  platforms?: Maybe<Array<Maybe<Scalars['ID']>>>;
  rating?: Maybe<Scalars['Int']>;
  replayCount?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['ISO8601Date']>;
  stores?: Maybe<Array<Maybe<Scalars['ID']>>>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationAddToSteamBlocklistArgs = {
  name: Scalars['String'];
  steamAppId: Scalars['Int'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationAddToWikidataBlocklistArgs = {
  name: Scalars['String'];
  wikidataId: Scalars['Int'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationBanUserArgs = {
  userId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationCreateCompanyArgs = {
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationCreateEngineArgs = {
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationCreateGenreArgs = {
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationCreatePlatformArgs = {
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationCreateSeriesArgs = {
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationCreateStoreArgs = {
  name: Scalars['String'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationDeleteCompanyArgs = {
  companyId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationDeleteEngineArgs = {
  engineId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationDeleteEventArgs = {
  eventId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationDeleteGameArgs = {
  gameId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationDeleteGenreArgs = {
  genreId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationDeletePlatformArgs = {
  platformId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationDeleteSeriesArgs = {
  seriesId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationDeleteStoreArgs = {
  storeId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationFavoriteGameArgs = {
  gameId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationFollowUserArgs = {
  userId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationMergeGamesArgs = {
  gameToKeepId: Scalars['ID'];
  gameToMergeId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationRemoveFromSteamBlocklistArgs = {
  steamBlocklistEntryId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationRemoveFromWikidataBlocklistArgs = {
  wikidataBlocklistEntryId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationRemoveGameCoverArgs = {
  gameId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationRemoveGameFromLibraryArgs = {
  gameId?: Maybe<Scalars['ID']>;
  gamePurchaseId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationRemoveUserAvatarArgs = {
  userId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUnbanUserArgs = {
  userId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUnfavoriteGameArgs = {
  gameId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUnfollowUserArgs = {
  userId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUpdateCompanyArgs = {
  companyId: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUpdateEngineArgs = {
  engineId: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUpdateGameInLibraryArgs = {
  comments?: Maybe<Scalars['String']>;
  completionDate?: Maybe<Scalars['ISO8601Date']>;
  completionStatus?: Maybe<GamePurchaseCompletionStatus>;
  gamePurchaseId: Scalars['ID'];
  hoursPlayed?: Maybe<Scalars['Float']>;
  platforms?: Maybe<Array<Maybe<Scalars['ID']>>>;
  rating?: Maybe<Scalars['Int']>;
  replayCount?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['ISO8601Date']>;
  stores?: Maybe<Array<Maybe<Scalars['ID']>>>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUpdateGenreArgs = {
  genreId: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUpdatePlatformArgs = {
  name?: Maybe<Scalars['String']>;
  platformId: Scalars['ID'];
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUpdateSeriesArgs = {
  name?: Maybe<Scalars['String']>;
  seriesId: Scalars['ID'];
  wikidataId?: Maybe<Scalars['ID']>;
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUpdateStoreArgs = {
  name?: Maybe<Scalars['String']>;
  storeId: Scalars['ID'];
};


/** Mutations are GraphQL requests that can be used to create, update, or delete records on vglist. */
export type MutationUpdateUserRoleArgs = {
  role: UserRole;
  userId: Scalars['ID'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** The max page size for a given set of nodes. */
  pageSize: Scalars['Int'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** Video game platforms, usually consoles or PC operating systems. */
export type Platform = {
  __typename?: 'Platform';
  /** When this platform was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games available on this platform. */
  games?: Maybe<GameConnection>;
  /** ID of the platform. */
  id: Scalars['ID'];
  /** Name of the platform. */
  name: Scalars['String'];
  /** When this platform was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Identifier for Wikidata. */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game platforms, usually consoles or PC operating systems. */
export type PlatformGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Platform. */
export type PlatformConnection = {
  __typename?: 'PlatformConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PlatformEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Platform>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PlatformEdge = {
  __typename?: 'PlatformEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Platform>;
};

/** A platform search result. */
export type PlatformSearchResult = SearchResultInterface & {
  __typename?: 'PlatformSearchResult';
  /** The contents of the search result, typically the name or username of the corresponding record. */
  content: Scalars['String'];
  /** The ID of the SearchResult record, probably not very useful most of the time. */
  id: Scalars['ID'];
  /** The ID of the corresponding record, e.g. the Game ID. */
  searchableId: Scalars['ID'];
  /** The type of the corresponding record. */
  searchableType: SearchableEnum;
};

/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type Query = {
  __typename?: 'Query';
  /** View recent activity. */
  activity?: Maybe<EventConnection>;
  /**
   * Current, basic site statistics for the home page. These values are
   * cached for 30 minutes and so won't necessarily represent the live
   * values.
   */
  basicSiteStatistics: BasicSiteStatistic;
  /** List all companies. */
  companies?: Maybe<CompanyConnection>;
  /** Find a company by ID. */
  company?: Maybe<Company>;
  /** Find a company by searching based on its name. */
  companySearch?: Maybe<CompanyConnection>;
  /** Get the currently authenticated user. */
  currentUser?: Maybe<User>;
  /** Find a game engine by ID. */
  engine?: Maybe<Engine>;
  /** Find a game engine by searching based on its name. */
  engineSearch?: Maybe<EngineConnection>;
  /** List all game engines. */
  engines?: Maybe<EngineConnection>;
  /** Find a game by ID or one of its external IDs. May only use one of the filters at a time. */
  game?: Maybe<Game>;
  /** Find a game purchase by ID. */
  gamePurchase?: Maybe<GamePurchase>;
  /** Find a game by searching based on its name. */
  gameSearch?: Maybe<GameConnection>;
  /** List all games. */
  games?: Maybe<GameConnection>;
  /** Find a genre by ID. */
  genre?: Maybe<Genre>;
  /** Find a genre by searching based on its name. */
  genreSearch?: Maybe<GenreConnection>;
  /** List all genres. */
  genres?: Maybe<GenreConnection>;
  /**
   * Search for records matching a given string. Returns Companies, Engines,
   * Games, Genres, Platforms, Series', and Users.
   *
   * Please always debounce/throttle requests to this endpoint. There's no
   * reason to send a request for every letter a user types.
   */
  globalSearch: SearchResultUnionConnection;
  /** Current statistics for all records on the site, for use on the admin dashboard. **Only available to admins.** */
  liveStatistics: SiteStatistic;
  /** Find a platform by ID. */
  platform?: Maybe<Platform>;
  /** Find a platform by searching based on its name. */
  platformSearch?: Maybe<PlatformConnection>;
  /** List all platforms. */
  platforms?: Maybe<PlatformConnection>;
  /** Find a series by ID. */
  series?: Maybe<Series>;
  /** List all series'. This is different from the other list queries because series is the plural of series. :( */
  seriesList?: Maybe<SeriesConnection>;
  /** Find a series by searching based on its name. */
  seriesSearch?: Maybe<SeriesConnection>;
  /** List all statistics. **Only available to admins.** */
  siteStatistics?: Maybe<SiteStatisticConnection>;
  /** List all steam blocklist entries. **Only available to admins.** */
  steamBlocklist?: Maybe<SteamBlocklistEntryConnection>;
  /** Find a store by ID. */
  store?: Maybe<Store>;
  /** Find a store by searching based on its name. */
  storeSearch?: Maybe<StoreConnection>;
  /** List all stores. */
  stores?: Maybe<StoreConnection>;
  /** Find a user. May only use one argument at a time. */
  user?: Maybe<User>;
  /** Find a user by searching based on its username. */
  userSearch?: Maybe<UserConnection>;
  /** List all users. */
  users?: Maybe<UserConnection>;
  /** List all Wikidata blocklist entries. **Only available to admins.** */
  wikidataBlocklist?: Maybe<WikidataBlocklistEntryConnection>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryActivityArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  feedType?: Maybe<ActivityFeed>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryCompaniesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryCompanyArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryCompanySearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryEngineArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryEngineSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryEnginesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGameArgs = {
  epicGamesStoreId?: Maybe<Scalars['String']>;
  giantbombId?: Maybe<Scalars['String']>;
  gogId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  igdbId?: Maybe<Scalars['String']>;
  mobygamesId?: Maybe<Scalars['String']>;
  pcgamingwikiId?: Maybe<Scalars['String']>;
  steamAppId?: Maybe<Scalars['Int']>;
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGamePurchaseArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGameSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  byYear?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  onPlatform?: Maybe<Scalars['ID']>;
  sortBy?: Maybe<GameSort>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGenreArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGenreSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGenresArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryGlobalSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
  searchableTypes?: Maybe<Array<SearchableEnum>>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryPlatformArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryPlatformSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryPlatformsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySeriesArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySeriesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySeriesSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySiteStatisticsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  sortDirection?: Maybe<SortDirection>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QuerySteamBlocklistArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryStoreArgs = {
  id: Scalars['ID'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryStoreSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryStoresArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryUserArgs = {
  id?: Maybe<Scalars['ID']>;
  slug?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryUserSearchArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryUsersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<UserSort>;
};


/** Queries are GraphQL requests that can be used to request data from vglist's database. */
export type QueryWikidataBlocklistArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** This represents the relationship between two users, where one user is following another. */
export type Relationship = {
  __typename?: 'Relationship';
  /** When this relationship was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The user being followed. */
  followed: User;
  /** The user that's following the other. */
  follower: User;
  /** ID of the relationship. */
  id: Scalars['ID'];
  /** When this relationship was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
};

/** Autogenerated return type of RemoveFromSteamBlocklist */
export type RemoveFromSteamBlocklistPayload = {
  __typename?: 'RemoveFromSteamBlocklistPayload';
  /** Whether the blocklist entry was deleted. */
  deleted: Scalars['Boolean'];
};

/** Autogenerated return type of RemoveFromWikidataBlocklist */
export type RemoveFromWikidataBlocklistPayload = {
  __typename?: 'RemoveFromWikidataBlocklistPayload';
  /** Whether the blocklist entry was deleted. */
  deleted: Scalars['Boolean'];
};

/** Autogenerated return type of RemoveGameCover */
export type RemoveGameCoverPayload = {
  __typename?: 'RemoveGameCoverPayload';
  /** The game thats cover was removed. */
  game: Game;
};

/** Autogenerated return type of RemoveGameFromLibrary */
export type RemoveGameFromLibraryPayload = {
  __typename?: 'RemoveGameFromLibraryPayload';
  /** The game being removed from the user's library. */
  game?: Maybe<Game>;
};

/** Autogenerated return type of RemoveUserAvatar */
export type RemoveUserAvatarPayload = {
  __typename?: 'RemoveUserAvatarPayload';
  /** The user thats avatar was removed. */
  user: User;
};

/** Search results returned by global search. */
export type SearchResultInterface = {
  /** The contents of the search result, typically the name or username of the corresponding record. */
  content: Scalars['String'];
  /** The ID of the SearchResult record, probably not very useful most of the time. */
  id: Scalars['ID'];
  /** The ID of the corresponding record, e.g. the Game ID. */
  searchableId: Scalars['ID'];
  /** The type of the corresponding record. */
  searchableType: SearchableEnum;
};

/** The various possible types of search result. */
export type SearchResultUnion = CompanySearchResult | EngineSearchResult | GameSearchResult | GenreSearchResult | PlatformSearchResult | SeriesSearchResult | UserSearchResult;

/** The connection type for SearchResultUnion. */
export type SearchResultUnionConnection = {
  __typename?: 'SearchResultUnionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SearchResultUnionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SearchResultUnion>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SearchResultUnionEdge = {
  __typename?: 'SearchResultUnionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<SearchResultUnion>;
};

/** The types of records that can be returned as a `SearchResult`. */
export enum SearchableEnum {
  /** Self-explanatory. */
  Company = 'COMPANY',
  /** Self-explanatory. */
  Engine = 'ENGINE',
  /** Self-explanatory. */
  Game = 'GAME',
  /** Self-explanatory. */
  Genre = 'GENRE',
  /** Self-explanatory. */
  Platform = 'PLATFORM',
  /** Self-explanatory. */
  Series = 'SERIES',
  /** Self-explanatory. */
  User = 'USER'
}

/** Video game series' */
export type Series = {
  __typename?: 'Series';
  /** When this series was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games in this series. */
  games?: Maybe<GameConnection>;
  /** ID of the series. */
  id: Scalars['ID'];
  /** Name of the series. */
  name: Scalars['String'];
  /** When this series was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Identifier for Wikidata. */
  wikidataId?: Maybe<Scalars['Int']>;
};


/** Video game series' */
export type SeriesGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Series. */
export type SeriesConnection = {
  __typename?: 'SeriesConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SeriesEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Series>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SeriesEdge = {
  __typename?: 'SeriesEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Series>;
};

/** A series search result. */
export type SeriesSearchResult = SearchResultInterface & {
  __typename?: 'SeriesSearchResult';
  /** The contents of the search result, typically the name or username of the corresponding record. */
  content: Scalars['String'];
  /** The ID of the SearchResult record, probably not very useful most of the time. */
  id: Scalars['ID'];
  /** The ID of the corresponding record, e.g. the Game ID. */
  searchableId: Scalars['ID'];
  /** The type of the corresponding record. */
  searchableType: SearchableEnum;
};

/**
 * Historical site statistics for vglist. Most of these values cannot be
 * `null`, but some may be if you go back far enough. Make sure to handle
 * `null` where necessary.
 */
export type SiteStatistic = {
  __typename?: 'SiteStatistic';
  /** The number of Banned Users at this point in time. */
  bannedUsers: Scalars['Int'];
  /** The number of Companies at this point in time. */
  companies: Scalars['Int'];
  /** The number of Company Versions at this point in time. */
  companyVersions?: Maybe<Scalars['Int']>;
  /** The number of Engine Versions at this point in time. */
  engineVersions?: Maybe<Scalars['Int']>;
  /** The number of Engines at this point in time. */
  engines: Scalars['Int'];
  /** The number of Epic Games Store IDs at this point in time. */
  epicGamesStoreIds: Scalars['Int'];
  /** The number of Events at this point in time. */
  events: Scalars['Int'];
  /** The number of Game Purchases at this point in time. */
  gamePurchases: Scalars['Int'];
  /** The number of Game Versions at this point in time. */
  gameVersions?: Maybe<Scalars['Int']>;
  /** The number of Games at this point in time. */
  games: Scalars['Int'];
  /** The number of Games with covers at this point in time. */
  gamesWithCovers: Scalars['Int'];
  /** The number of Games with release dates at this point in time. */
  gamesWithReleaseDates: Scalars['Int'];
  /** The number of Genre Versions at this point in time. */
  genreVersions?: Maybe<Scalars['Int']>;
  /** The number of Genres at this point in time. */
  genres: Scalars['Int'];
  /** The number of GiantBomb IDs at this point in time. */
  giantbombIds: Scalars['Int'];
  /** The number of GOG.com IDs at this point in time. */
  gogIds: Scalars['Int'];
  /** ID of the statistic record. Shouldn't ever be `null` except in the LiveStatistics query. */
  id?: Maybe<Scalars['ID']>;
  /** The number of IGDB IDs at this point in time. */
  igdbIds?: Maybe<Scalars['Int']>;
  /** The number of MobyGames IDs at this point in time. */
  mobygamesIds: Scalars['Int'];
  /** The number of PCGamingWiki IDs at this point in time. */
  pcgamingwikiIds: Scalars['Int'];
  /** The number of Platform Versions at this point in time. */
  platformVersions?: Maybe<Scalars['Int']>;
  /** The number of Platforms at this point in time. */
  platforms: Scalars['Int'];
  /** The number of Relationships at this point in time. */
  relationships: Scalars['Int'];
  /** The number of Series at this point in time. */
  series: Scalars['Int'];
  /** The number of Series Versions at this point in time. */
  seriesVersions?: Maybe<Scalars['Int']>;
  /** The number of Steam App IDs at this point in time. */
  steamAppIds: Scalars['Int'];
  /** The number of Stores at this point in time. */
  stores: Scalars['Int'];
  /**
   * The point in time at which these statistics were logged, always UTC. Shouldn't
   * ever be `null` except in the LiveStatistics query.
   */
  timestamp?: Maybe<Scalars['ISO8601DateTime']>;
  /** The number of Users at this point in time. */
  users: Scalars['Int'];
  /** The number of Wikidata IDs at this point in time. */
  wikidataIds: Scalars['Int'];
};

/** The connection type for SiteStatistic. */
export type SiteStatisticConnection = {
  __typename?: 'SiteStatisticConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SiteStatisticEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SiteStatistic>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SiteStatisticEdge = {
  __typename?: 'SiteStatisticEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<SiteStatistic>;
};

/** Direction for sorting a list of records. */
export enum SortDirection {
  /** Sorted ascending (smaller values first). */
  Asc = 'ASC',
  /** Sorted descending (larger values first). */
  Desc = 'DESC'
}

/**
 * Entries in the Steam Blocklist, for blocking the creation of games with a
 * given Steam App ID. Mainly used for things we don't want to track, such
 * as DLC or non-game Steam applications.
 */
export type SteamBlocklistEntry = {
  __typename?: 'SteamBlocklistEntry';
  /** When this blocklist entry was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** ID of the Steam Blocklist entry. */
  id: Scalars['ID'];
  /** Name of the game that has been blocked. */
  name: Scalars['String'];
  /** The blocked Steam App ID. */
  steamAppId: Scalars['Int'];
  /** When this blocklist entry was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** User that created this blocklist entry, can be null if the user deleted their account. */
  user?: Maybe<User>;
};

/** The connection type for SteamBlocklistEntry. */
export type SteamBlocklistEntryConnection = {
  __typename?: 'SteamBlocklistEntryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SteamBlocklistEntryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SteamBlocklistEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SteamBlocklistEntryEdge = {
  __typename?: 'SteamBlocklistEntryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<SteamBlocklistEntry>;
};

/** Stores where video games are sold, e.g. Steam or the Epic Games Store */
export type Store = {
  __typename?: 'Store';
  /** When this store was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** ID of the store. */
  id: Scalars['ID'];
  /** Name of the store. */
  name: Scalars['String'];
  /** When this store was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for Store. */
export type StoreConnection = {
  __typename?: 'StoreConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StoreEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Store>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type StoreEdge = {
  __typename?: 'StoreEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Store>;
};

/** Autogenerated return type of UnbanUser */
export type UnbanUserPayload = {
  __typename?: 'UnbanUserPayload';
  /** The user that has been unbanned. */
  user?: Maybe<User>;
};

/** Autogenerated return type of UnfavoriteGame */
export type UnfavoriteGamePayload = {
  __typename?: 'UnfavoriteGamePayload';
  /** The game being unfavorited. */
  game?: Maybe<Game>;
};

/** Autogenerated return type of UnfollowUser */
export type UnfollowUserPayload = {
  __typename?: 'UnfollowUserPayload';
  /** The user being unfollowed. */
  user?: Maybe<User>;
};

/** Autogenerated return type of UpdateCompany */
export type UpdateCompanyPayload = {
  __typename?: 'UpdateCompanyPayload';
  /** The company that was updated. */
  company: Company;
};

/** Autogenerated return type of UpdateEngine */
export type UpdateEnginePayload = {
  __typename?: 'UpdateEnginePayload';
  /** The engine that was updated. */
  engine: Engine;
};

/** Autogenerated return type of UpdateGameInLibrary */
export type UpdateGameInLibraryPayload = {
  __typename?: 'UpdateGameInLibraryPayload';
  /** The game purchase being updated in the user's library. */
  gamePurchase?: Maybe<GamePurchase>;
};

/** Autogenerated return type of UpdateGenre */
export type UpdateGenrePayload = {
  __typename?: 'UpdateGenrePayload';
  /** The genre that was updated. */
  genre: Genre;
};

/** Autogenerated return type of UpdatePlatform */
export type UpdatePlatformPayload = {
  __typename?: 'UpdatePlatformPayload';
  /** The platform that was updated. */
  platform: Platform;
};

/** Autogenerated return type of UpdateSeries */
export type UpdateSeriesPayload = {
  __typename?: 'UpdateSeriesPayload';
  /** The series that was updated. */
  series: Series;
};

/** Autogenerated return type of UpdateStore */
export type UpdateStorePayload = {
  __typename?: 'UpdateStorePayload';
  /** The store that was updated. */
  store: Store;
};

/** Autogenerated return type of UpdateUserRole */
export type UpdateUserRolePayload = {
  __typename?: 'UpdateUserRolePayload';
  /** The user that has been updated. */
  user?: Maybe<User>;
};

/** User accounts on vglist */
export type User = {
  __typename?: 'User';
  /** Activity Events that refer to this user. */
  activity?: Maybe<EventConnection>;
  /** URL for the user's avatar image. `null` means the user has the default avatar. */
  avatarUrl?: Maybe<Scalars['String']>;
  /** Whether this user has been banned. */
  banned: Scalars['Boolean'];
  /** User profile description, aka 'bio'. */
  bio?: Maybe<Scalars['String']>;
  /** When this user was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Games that this user has favorited. */
  favoritedGames?: Maybe<GameConnection>;
  /** Users that are following this user. */
  followers?: Maybe<UserConnection>;
  /** Users that this user is following. */
  following?: Maybe<UserConnection>;
  /** Games in this user's library. */
  gamePurchases?: Maybe<GamePurchaseConnection>;
  /** ID of the user. */
  id: Scalars['ID'];
  /**
   * Whether the current user is following this user. `null` if there is no
   * logged-in user or the current user is querying on themselves.
   */
  isFollowed?: Maybe<Scalars['Boolean']>;
  /** The user's level of privacy. */
  privacy: UserPrivacy;
  /** User permission level. */
  role: UserRole;
  /** The user's slug, used for their profile URL. */
  slug: Scalars['String'];
  /** When this user was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Username of the user. */
  username: Scalars['String'];
};


/** User accounts on vglist */
export type UserActivityArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** User accounts on vglist */
export type UserAvatarUrlArgs = {
  size?: Maybe<UserAvatarSize>;
};


/** User accounts on vglist */
export type UserFavoritedGamesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** User accounts on vglist */
export type UserFollowersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** User accounts on vglist */
export type UserFollowingArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** User accounts on vglist */
export type UserGamePurchasesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The size of the user avatar. */
export enum UserAvatarSize {
  /** User avatar image with a width of 300 and height of 300. */
  Large = 'LARGE',
  /** User avatar image with a width of 150 and height of 150. */
  Medium = 'MEDIUM',
  /** User avatar image with a width of 80 and height of 80. */
  Small = 'SMALL'
}

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

/** An enum describing the privacy level of a given user. Most users will be `PUBLIC_ACCOUNT`. */
export enum UserPrivacy {
  /** User has a private profile. */
  PrivateAccount = 'PRIVATE_ACCOUNT',
  /** User has a publicly-visible profile. */
  PublicAccount = 'PUBLIC_ACCOUNT'
}

/** Roles that a user can have, these define permissions levels. Most users will be `MEMBER`. */
export enum UserRole {
  /** User is an admin and has the highest permissions. */
  Admin = 'ADMIN',
  /** User is a regular user. */
  Member = 'MEMBER',
  /** User has some heightened permissions. */
  Moderator = 'MODERATOR'
}

/** A user search result. */
export type UserSearchResult = SearchResultInterface & {
  __typename?: 'UserSearchResult';
  /** URL for the user's avatar image. `null` means the user has the default avatar. */
  avatarUrl?: Maybe<Scalars['String']>;
  /** The contents of the search result, typically the name or username of the corresponding record. */
  content: Scalars['String'];
  /** The ID of the SearchResult record, probably not very useful most of the time. */
  id: Scalars['ID'];
  /** The ID of the corresponding record, e.g. the Game ID. */
  searchableId: Scalars['ID'];
  /** The type of the corresponding record. */
  searchableType: SearchableEnum;
  /** The slug for usage defining the user's profile URL. */
  slug: Scalars['String'];
};


/** A user search result. */
export type UserSearchResultAvatarUrlArgs = {
  size?: Maybe<UserAvatarSize>;
};

/** Options for sorting users. */
export enum UserSort {
  /** Sorted by the number of users following the given user. */
  MostFollowers = 'MOST_FOLLOWERS',
  /** Sorted by the number of games in the given user's library. */
  MostGames = 'MOST_GAMES'
}

/**
 * Entries in the Wikidata Blocklist, for blocking the creation of games
 * with a given Wikidata ID. Mainly used for things we don't want to track,
 * such as DLC or things that aren't _really_ games but are declared as
 * games in Wikidata.
 */
export type WikidataBlocklistEntry = {
  __typename?: 'WikidataBlocklistEntry';
  /** When this blocklist entry was first created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** ID of the Wikidata Blocklist entry. */
  id: Scalars['ID'];
  /** Name of the game that has been blocked. */
  name: Scalars['String'];
  /** When this blocklist entry was last updated. */
  updatedAt: Scalars['ISO8601DateTime'];
  /** User that created this blocklist entry, can be null if the user deleted their account. */
  user?: Maybe<User>;
  /** The blocked Wikidata ID. */
  wikidataId: Scalars['Int'];
};

/** The connection type for WikidataBlocklistEntry. */
export type WikidataBlocklistEntryConnection = {
  __typename?: 'WikidataBlocklistEntryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<WikidataBlocklistEntryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<WikidataBlocklistEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of records returned by this query. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type WikidataBlocklistEntryEdge = {
  __typename?: 'WikidataBlocklistEntryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<WikidataBlocklistEntry>;
};

export type EventCardFieldsFragment = (
  { __typename?: 'Event' }
  & Pick<Event, 'id' | 'eventCategory' | 'createdAt'>
  & { user: (
    { __typename?: 'User' }
    & Pick<User, 'slug' | 'username' | 'avatarUrl'>
  ), eventable: (
    { __typename: 'FavoriteGame' }
    & { game: (
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    ) }
  ) | (
    { __typename: 'GamePurchase' }
    & { game: (
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    ) }
  ) | (
    { __typename: 'Relationship' }
    & { followed: (
      { __typename?: 'User' }
      & Pick<User, 'username' | 'slug'>
    ) }
  ) | (
    { __typename: 'User' }
    & Pick<User, 'slug' | 'username'>
  ) }
);

export type GameCardFieldsFragment = (
  { __typename?: 'Game' }
  & Pick<Game, 'id' | 'name' | 'coverUrl' | 'isFavorited'>
  & { platforms?: Maybe<(
    { __typename?: 'PlatformConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Platform' }
      & Pick<Platform, 'name'>
    )>>> }
  )>, developers?: Maybe<(
    { __typename?: 'CompanyConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Company' }
      & Pick<Company, 'name'>
    )>>> }
  )> }
);

export type PaginationFieldsFragment = (
  { __typename?: 'PageInfo' }
  & Pick<PageInfo, 'hasPreviousPage' | 'hasNextPage' | 'startCursor' | 'endCursor'>
);

export type UserCardFieldsFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'username' | 'slug' | 'bio' | 'avatarUrl' | 'privacy' | 'banned' | 'role'>
  & { gamePurchases?: Maybe<(
    { __typename?: 'GamePurchaseConnection' }
    & Pick<GamePurchaseConnection, 'totalCount'>
  )> }
);

export type DeleteEventMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteEventMutation = (
  { __typename?: 'Mutation' }
  & { deleteEvent?: Maybe<(
    { __typename?: 'DeleteEventPayload' }
    & Pick<DeleteEventPayload, 'deleted'>
  )> }
);

export type RemoveFromSteamBlocklistMutationVariables = Exact<{
  blocklistEntryId: Scalars['ID'];
}>;


export type RemoveFromSteamBlocklistMutation = (
  { __typename?: 'Mutation' }
  & { removeFromSteamBlocklist?: Maybe<(
    { __typename?: 'RemoveFromSteamBlocklistPayload' }
    & Pick<RemoveFromSteamBlocklistPayload, 'deleted'>
  )> }
);

export type RemoveFromWikidataBlocklistMutationVariables = Exact<{
  blocklistEntryId: Scalars['ID'];
}>;


export type RemoveFromWikidataBlocklistMutation = (
  { __typename?: 'Mutation' }
  & { removeFromWikidataBlocklist?: Maybe<(
    { __typename?: 'RemoveFromWikidataBlocklistPayload' }
    & Pick<RemoveFromWikidataBlocklistPayload, 'deleted'>
  )> }
);

export type CreateCompanyMutationVariables = Exact<{
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type CreateCompanyMutation = (
  { __typename?: 'Mutation' }
  & { createCompany?: Maybe<(
    { __typename?: 'CreateCompanyPayload' }
    & { company?: Maybe<(
      { __typename?: 'Company' }
      & Pick<Company, 'id'>
    )> }
  )> }
);

export type DeleteCompanyMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteCompanyMutation = (
  { __typename?: 'Mutation' }
  & { deleteCompany?: Maybe<(
    { __typename?: 'DeleteCompanyPayload' }
    & Pick<DeleteCompanyPayload, 'deleted'>
  )> }
);

export type UpdateCompanyMutationVariables = Exact<{
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type UpdateCompanyMutation = (
  { __typename?: 'Mutation' }
  & { updateCompany?: Maybe<(
    { __typename?: 'UpdateCompanyPayload' }
    & { company: (
      { __typename?: 'Company' }
      & Pick<Company, 'id'>
    ) }
  )> }
);

export type CreateEngineMutationVariables = Exact<{
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type CreateEngineMutation = (
  { __typename?: 'Mutation' }
  & { createEngine?: Maybe<(
    { __typename?: 'CreateEnginePayload' }
    & { engine?: Maybe<(
      { __typename?: 'Engine' }
      & Pick<Engine, 'id'>
    )> }
  )> }
);

export type DeleteEngineMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteEngineMutation = (
  { __typename?: 'Mutation' }
  & { deleteEngine?: Maybe<(
    { __typename?: 'DeleteEnginePayload' }
    & Pick<DeleteEnginePayload, 'deleted'>
  )> }
);

export type UpdateEngineMutationVariables = Exact<{
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type UpdateEngineMutation = (
  { __typename?: 'Mutation' }
  & { updateEngine?: Maybe<(
    { __typename?: 'UpdateEnginePayload' }
    & { engine: (
      { __typename?: 'Engine' }
      & Pick<Engine, 'id'>
    ) }
  )> }
);

export type AddGameToLibraryMutationVariables = Exact<{
  gameId: Scalars['ID'];
  rating?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['ISO8601Date']>;
  completionDate?: Maybe<Scalars['ISO8601Date']>;
  completionStatus?: Maybe<GamePurchaseCompletionStatus>;
  comments?: Maybe<Scalars['String']>;
  hoursPlayed?: Maybe<Scalars['Float']>;
  replayCount?: Maybe<Scalars['Int']>;
  platforms?: Maybe<Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>>;
  stores?: Maybe<Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>>;
}>;


export type AddGameToLibraryMutation = (
  { __typename?: 'Mutation' }
  & { addGameToLibrary?: Maybe<(
    { __typename?: 'AddGameToLibraryPayload' }
    & { gamePurchase?: Maybe<(
      { __typename?: 'GamePurchase' }
      & Pick<GamePurchase, 'id'>
    )> }
  )> }
);

export type AddGameToWikidataBlocklistMutationVariables = Exact<{
  name: Scalars['String'];
  wikidataId: Scalars['Int'];
}>;


export type AddGameToWikidataBlocklistMutation = (
  { __typename?: 'Mutation' }
  & { addToWikidataBlocklist?: Maybe<(
    { __typename?: 'AddToWikidataBlocklistPayload' }
    & { wikidataBlocklistEntry?: Maybe<(
      { __typename?: 'WikidataBlocklistEntry' }
      & Pick<WikidataBlocklistEntry, 'id'>
    )> }
  )> }
);

export type DeleteGameMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteGameMutation = (
  { __typename?: 'Mutation' }
  & { deleteGame?: Maybe<(
    { __typename?: 'DeleteGamePayload' }
    & Pick<DeleteGamePayload, 'deleted'>
  )> }
);

export type FavoriteGameMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type FavoriteGameMutation = (
  { __typename?: 'Mutation' }
  & { favoriteGame?: Maybe<(
    { __typename?: 'FavoriteGamePayload' }
    & { game?: Maybe<(
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    )> }
  )> }
);

export type MergeGamesMutationVariables = Exact<{
  gameToKeepId: Scalars['ID'];
  gameToMergeId: Scalars['ID'];
}>;


export type MergeGamesMutation = (
  { __typename?: 'Mutation' }
  & { mergeGames?: Maybe<(
    { __typename?: 'MergeGamesPayload' }
    & { game: (
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    ) }
  )> }
);

export type RemoveGameCoverMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type RemoveGameCoverMutation = (
  { __typename?: 'Mutation' }
  & { removeGameCover?: Maybe<(
    { __typename?: 'RemoveGameCoverPayload' }
    & { game: (
      { __typename?: 'Game' }
      & Pick<Game, 'name'>
    ) }
  )> }
);

export type RemoveGameFromLibraryMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type RemoveGameFromLibraryMutation = (
  { __typename?: 'Mutation' }
  & { removeGameFromLibrary?: Maybe<(
    { __typename?: 'RemoveGameFromLibraryPayload' }
    & { game?: Maybe<(
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    )> }
  )> }
);

export type UnfavoriteGameMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type UnfavoriteGameMutation = (
  { __typename?: 'Mutation' }
  & { unfavoriteGame?: Maybe<(
    { __typename?: 'UnfavoriteGamePayload' }
    & { game?: Maybe<(
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    )> }
  )> }
);

export type UpdateGameInLibraryMutationVariables = Exact<{
  gamePurchaseId: Scalars['ID'];
  rating?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['ISO8601Date']>;
  completionDate?: Maybe<Scalars['ISO8601Date']>;
  completionStatus?: Maybe<GamePurchaseCompletionStatus>;
  comments?: Maybe<Scalars['String']>;
  hoursPlayed?: Maybe<Scalars['Float']>;
  replayCount?: Maybe<Scalars['Int']>;
  platforms?: Maybe<Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>>;
  stores?: Maybe<Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>>;
}>;


export type UpdateGameInLibraryMutation = (
  { __typename?: 'Mutation' }
  & { updateGameInLibrary?: Maybe<(
    { __typename?: 'UpdateGameInLibraryPayload' }
    & { gamePurchase?: Maybe<(
      { __typename?: 'GamePurchase' }
      & Pick<GamePurchase, 'id'>
    )> }
  )> }
);

export type CreateGenreMutationVariables = Exact<{
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type CreateGenreMutation = (
  { __typename?: 'Mutation' }
  & { createGenre?: Maybe<(
    { __typename?: 'CreateGenrePayload' }
    & { genre?: Maybe<(
      { __typename?: 'Genre' }
      & Pick<Genre, 'id'>
    )> }
  )> }
);

export type DeleteGenreMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteGenreMutation = (
  { __typename?: 'Mutation' }
  & { deleteGenre?: Maybe<(
    { __typename?: 'DeleteGenrePayload' }
    & Pick<DeleteGenrePayload, 'deleted'>
  )> }
);

export type UpdateGenreMutationVariables = Exact<{
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type UpdateGenreMutation = (
  { __typename?: 'Mutation' }
  & { updateGenre?: Maybe<(
    { __typename?: 'UpdateGenrePayload' }
    & { genre: (
      { __typename?: 'Genre' }
      & Pick<Genre, 'id'>
    ) }
  )> }
);

export type CreatePlatformMutationVariables = Exact<{
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type CreatePlatformMutation = (
  { __typename?: 'Mutation' }
  & { createPlatform?: Maybe<(
    { __typename?: 'CreatePlatformPayload' }
    & { platform?: Maybe<(
      { __typename?: 'Platform' }
      & Pick<Platform, 'id'>
    )> }
  )> }
);

export type DeletePlatformMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeletePlatformMutation = (
  { __typename?: 'Mutation' }
  & { deletePlatform?: Maybe<(
    { __typename?: 'DeletePlatformPayload' }
    & Pick<DeletePlatformPayload, 'deleted'>
  )> }
);

export type UpdatePlatformMutationVariables = Exact<{
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type UpdatePlatformMutation = (
  { __typename?: 'Mutation' }
  & { updatePlatform?: Maybe<(
    { __typename?: 'UpdatePlatformPayload' }
    & { platform: (
      { __typename?: 'Platform' }
      & Pick<Platform, 'id'>
    ) }
  )> }
);

export type CreateSeriesMutationVariables = Exact<{
  name: Scalars['String'];
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type CreateSeriesMutation = (
  { __typename?: 'Mutation' }
  & { createSeries?: Maybe<(
    { __typename?: 'CreateSeriesPayload' }
    & { series?: Maybe<(
      { __typename?: 'Series' }
      & Pick<Series, 'id'>
    )> }
  )> }
);

export type DeleteSeriesMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteSeriesMutation = (
  { __typename?: 'Mutation' }
  & { deleteSeries?: Maybe<(
    { __typename?: 'DeleteSeriesPayload' }
    & Pick<DeleteSeriesPayload, 'deleted'>
  )> }
);

export type UpdateSeriesMutationVariables = Exact<{
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  wikidataId?: Maybe<Scalars['ID']>;
}>;


export type UpdateSeriesMutation = (
  { __typename?: 'Mutation' }
  & { updateSeries?: Maybe<(
    { __typename?: 'UpdateSeriesPayload' }
    & { series: (
      { __typename?: 'Series' }
      & Pick<Series, 'id'>
    ) }
  )> }
);

export type CreateStoreMutationVariables = Exact<{
  name: Scalars['String'];
}>;


export type CreateStoreMutation = (
  { __typename?: 'Mutation' }
  & { createStore?: Maybe<(
    { __typename?: 'CreateStorePayload' }
    & { store?: Maybe<(
      { __typename?: 'Store' }
      & Pick<Store, 'id'>
    )> }
  )> }
);

export type DeleteStoreMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteStoreMutation = (
  { __typename?: 'Mutation' }
  & { deleteStore?: Maybe<(
    { __typename?: 'DeleteStorePayload' }
    & Pick<DeleteStorePayload, 'deleted'>
  )> }
);

export type UpdateStoreMutationVariables = Exact<{
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
}>;


export type UpdateStoreMutation = (
  { __typename?: 'Mutation' }
  & { updateStore?: Maybe<(
    { __typename?: 'UpdateStorePayload' }
    & { store: (
      { __typename?: 'Store' }
      & Pick<Store, 'id'>
    ) }
  )> }
);

export type ActivityFeedQueryVariables = Exact<{
  feedType?: Maybe<ActivityFeed>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type ActivityFeedQuery = (
  { __typename?: 'Query' }
  & { activity?: Maybe<(
    { __typename?: 'EventConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Event' }
      & EventCardFieldsFragment
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type GamePurchaseQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GamePurchaseQuery = (
  { __typename?: 'Query' }
  & { gamePurchase?: Maybe<(
    { __typename?: 'GamePurchase' }
    & Pick<GamePurchase, 'rating' | 'startDate' | 'completionDate' | 'completionStatus' | 'comments' | 'hoursPlayed' | 'replayCount'>
    & { platforms?: Maybe<(
      { __typename?: 'PlatformConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Platform' }
        & Pick<Platform, 'id' | 'name'>
      )>>> }
    )>, stores?: Maybe<(
      { __typename?: 'StoreConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Store' }
        & Pick<Store, 'id' | 'name'>
      )>>> }
    )> }
  )> }
);

export type GlobalSearchQueryVariables = Exact<{
  query: Scalars['String'];
  cursor?: Maybe<Scalars['String']>;
}>;


export type GlobalSearchQuery = (
  { __typename?: 'Query' }
  & { globalSearch: (
    { __typename?: 'SearchResultUnionConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename: 'CompanySearchResult' }
      & Pick<CompanySearchResult, 'id' | 'searchableId' | 'content'>
    ) | (
      { __typename: 'EngineSearchResult' }
      & Pick<EngineSearchResult, 'id' | 'searchableId' | 'content'>
    ) | (
      { __typename: 'GameSearchResult' }
      & Pick<GameSearchResult, 'id' | 'searchableId' | 'content' | 'releaseDate' | 'developerName'>
      & { imageUrl: GameSearchResult['coverUrl'] }
    ) | (
      { __typename: 'GenreSearchResult' }
      & Pick<GenreSearchResult, 'id' | 'searchableId' | 'content'>
    ) | (
      { __typename: 'PlatformSearchResult' }
      & Pick<PlatformSearchResult, 'id' | 'searchableId' | 'content'>
    ) | (
      { __typename: 'SeriesSearchResult' }
      & Pick<SeriesSearchResult, 'id' | 'searchableId' | 'content'>
    ) | (
      { __typename: 'UserSearchResult' }
      & Pick<UserSearchResult, 'id' | 'searchableId' | 'content' | 'slug'>
      & { imageUrl: UserSearchResult['avatarUrl'] }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type HomeStatisticsQueryVariables = Exact<{ [key: string]: never; }>;


export type HomeStatisticsQuery = (
  { __typename?: 'Query' }
  & { basicSiteStatistics: (
    { __typename?: 'BasicSiteStatistic' }
    & Pick<BasicSiteStatistic, 'companies' | 'engines' | 'games' | 'genres' | 'platforms' | 'series'>
  ) }
);

export type LiveStatisticsQueryVariables = Exact<{ [key: string]: never; }>;


export type LiveStatisticsQuery = (
  { __typename?: 'Query' }
  & { liveStatistics: (
    { __typename?: 'SiteStatistic' }
    & Pick<SiteStatistic, 'users' | 'games' | 'platforms' | 'series' | 'engines' | 'companies' | 'genres' | 'stores' | 'events' | 'gamePurchases' | 'relationships' | 'gamesWithCovers' | 'gamesWithReleaseDates' | 'bannedUsers' | 'mobygamesIds' | 'pcgamingwikiIds' | 'wikidataIds' | 'giantbombIds' | 'steamAppIds' | 'epicGamesStoreIds' | 'gogIds' | 'igdbIds' | 'companyVersions' | 'gameVersions' | 'genreVersions' | 'engineVersions' | 'platformVersions' | 'seriesVersions'>
  ) }
);

export type SiteStatisticsQueryVariables = Exact<{
  cursor?: Maybe<Scalars['String']>;
}>;


export type SiteStatisticsQuery = (
  { __typename?: 'Query' }
  & { siteStatistics?: Maybe<(
    { __typename?: 'SiteStatisticConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'SiteStatistic' }
      & Pick<SiteStatistic, 'id' | 'timestamp' | 'users' | 'games' | 'platforms' | 'series' | 'engines' | 'companies' | 'genres' | 'stores' | 'events' | 'gamePurchases' | 'relationships' | 'gamesWithCovers' | 'gamesWithReleaseDates' | 'bannedUsers' | 'mobygamesIds' | 'pcgamingwikiIds' | 'wikidataIds' | 'giantbombIds' | 'steamAppIds' | 'epicGamesStoreIds' | 'gogIds' | 'igdbIds' | 'companyVersions' | 'gameVersions' | 'genreVersions' | 'engineVersions' | 'platformVersions' | 'seriesVersions'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type SteamBlocklistQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type SteamBlocklistQuery = (
  { __typename?: 'Query' }
  & { steamBlocklist?: Maybe<(
    { __typename?: 'SteamBlocklistEntryConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'SteamBlocklistEntry' }
      & Pick<SteamBlocklistEntry, 'id' | 'name' | 'steamAppId' | 'createdAt'>
      & { user?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'username' | 'slug'>
      )> }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type WikidataBlocklistQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type WikidataBlocklistQuery = (
  { __typename?: 'Query' }
  & { wikidataBlocklist?: Maybe<(
    { __typename?: 'WikidataBlocklistEntryConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'WikidataBlocklistEntry' }
      & Pick<WikidataBlocklistEntry, 'id' | 'name' | 'wikidataId' | 'createdAt'>
      & { user?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'username' | 'slug'>
      )> }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type CompaniesQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type CompaniesQuery = (
  { __typename?: 'Query' }
  & { companies?: Maybe<(
    { __typename?: 'CompanyConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Company' }
      & Pick<Company, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type CompanyQueryVariables = Exact<{
  id: Scalars['ID'];
  developedBefore?: Maybe<Scalars['String']>;
  developedLast?: Maybe<Scalars['Int']>;
  developedAfter?: Maybe<Scalars['String']>;
  publishedBefore?: Maybe<Scalars['String']>;
  publishedLast?: Maybe<Scalars['Int']>;
  publishedAfter?: Maybe<Scalars['String']>;
}>;


export type CompanyQuery = (
  { __typename?: 'Query' }
  & { company?: Maybe<(
    { __typename?: 'Company' }
    & Pick<Company, 'id' | 'name' | 'wikidataId'>
    & { developedGames?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )>, publishedGames?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type EngineQueryVariables = Exact<{
  id: Scalars['ID'];
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type EngineQuery = (
  { __typename?: 'Query' }
  & { engine?: Maybe<(
    { __typename?: 'Engine' }
    & Pick<Engine, 'id' | 'name' | 'wikidataId'>
    & { games?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type EnginesQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type EnginesQuery = (
  { __typename?: 'Query' }
  & { engines?: Maybe<(
    { __typename?: 'EngineConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Engine' }
      & Pick<Engine, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type GameQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GameQuery = (
  { __typename?: 'Query' }
  & { game?: Maybe<(
    { __typename?: 'Game' }
    & Pick<Game, 'id' | 'name' | 'releaseDate' | 'coverUrl' | 'avgRating' | 'wikidataId' | 'igdbId' | 'gogId' | 'steamAppIds' | 'epicGamesStoreId' | 'mobygamesId' | 'pcgamingwikiId' | 'giantbombId' | 'isFavorited' | 'isInLibrary' | 'gamePurchaseId'>
    & { genres?: Maybe<(
      { __typename?: 'GenreConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Genre' }
        & Pick<Genre, 'id' | 'name'>
      )>>> }
    )>, platforms?: Maybe<(
      { __typename?: 'PlatformConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Platform' }
        & Pick<Platform, 'id' | 'name'>
      )>>> }
    )>, series?: Maybe<(
      { __typename?: 'Series' }
      & Pick<Series, 'id' | 'name'>
      & { games?: Maybe<(
        { __typename?: 'GameConnection' }
        & { nodes?: Maybe<Array<Maybe<(
          { __typename?: 'Game' }
          & Pick<Game, 'id' | 'name' | 'coverUrl'>
        )>>> }
      )> }
    )>, developers?: Maybe<(
      { __typename?: 'CompanyConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Company' }
        & Pick<Company, 'id' | 'name'>
      )>>> }
    )>, publishers?: Maybe<(
      { __typename?: 'CompanyConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Company' }
        & Pick<Company, 'id' | 'name'>
      )>>> }
    )>, engines?: Maybe<(
      { __typename?: 'EngineConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Engine' }
        & Pick<Engine, 'id' | 'name'>
      )>>> }
    )>, owners?: Maybe<(
      { __typename?: 'UserConnection' }
      & Pick<UserConnection, 'totalCount'>
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'id' | 'username' | 'slug' | 'avatarUrl'>
      )>>> }
    )>, favoriters?: Maybe<(
      { __typename?: 'UserConnection' }
      & Pick<UserConnection, 'totalCount'>
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'id' | 'username' | 'slug' | 'avatarUrl'>
      )>>> }
    )> }
  )> }
);

export type GameSearchQueryVariables = Exact<{
  query: Scalars['String'];
}>;


export type GameSearchQuery = (
  { __typename?: 'Query' }
  & { gameSearch?: Maybe<(
    { __typename?: 'GameConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Game' }
      & Pick<Game, 'id' | 'name'>
    )>>> }
  )> }
);

export type GamesQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  sortBy?: Maybe<GameSort>;
  platformId?: Maybe<Scalars['ID']>;
  byYear?: Maybe<Scalars['Int']>;
}>;


export type GamesQuery = (
  { __typename?: 'Query' }
  & { games?: Maybe<(
    { __typename?: 'GameConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Game' }
      & GameCardFieldsFragment
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type GenreQueryVariables = Exact<{
  id: Scalars['ID'];
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type GenreQuery = (
  { __typename?: 'Query' }
  & { genre?: Maybe<(
    { __typename?: 'Genre' }
    & Pick<Genre, 'id' | 'name' | 'wikidataId'>
    & { games?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type GenresQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type GenresQuery = (
  { __typename?: 'Query' }
  & { genres?: Maybe<(
    { __typename?: 'GenreConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Genre' }
      & Pick<Genre, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type PlatformQueryVariables = Exact<{
  id: Scalars['ID'];
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type PlatformQuery = (
  { __typename?: 'Query' }
  & { platform?: Maybe<(
    { __typename?: 'Platform' }
    & Pick<Platform, 'id' | 'name' | 'wikidataId'>
    & { games?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type PlatformSearchQueryVariables = Exact<{
  query: Scalars['String'];
}>;


export type PlatformSearchQuery = (
  { __typename?: 'Query' }
  & { platformSearch?: Maybe<(
    { __typename?: 'PlatformConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Platform' }
      & Pick<Platform, 'id' | 'name'>
    )>>> }
  )> }
);

export type PlatformsQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type PlatformsQuery = (
  { __typename?: 'Query' }
  & { platforms?: Maybe<(
    { __typename?: 'PlatformConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Platform' }
      & Pick<Platform, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type SeriesQueryVariables = Exact<{
  id: Scalars['ID'];
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type SeriesQuery = (
  { __typename?: 'Query' }
  & { series?: Maybe<(
    { __typename?: 'Series' }
    & Pick<Series, 'id' | 'name' | 'wikidataId'>
    & { games?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type SeriesListQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type SeriesListQuery = (
  { __typename?: 'Query' }
  & { seriesList?: Maybe<(
    { __typename?: 'SeriesConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Series' }
      & Pick<Series, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type StoreQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type StoreQuery = (
  { __typename?: 'Query' }
  & { store?: Maybe<(
    { __typename?: 'Store' }
    & Pick<Store, 'id' | 'name'>
  )> }
);

export type StoreSearchQueryVariables = Exact<{
  query: Scalars['String'];
}>;


export type StoreSearchQuery = (
  { __typename?: 'Query' }
  & { storeSearch?: Maybe<(
    { __typename?: 'StoreConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Store' }
      & Pick<Store, 'id' | 'name'>
    )>>> }
  )> }
);

export type StoresQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
}>;


export type StoresQuery = (
  { __typename?: 'Query' }
  & { stores?: Maybe<(
    { __typename?: 'StoreConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Store' }
      & Pick<Store, 'id' | 'name'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export type RemoveUserAvatarMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type RemoveUserAvatarMutation = (
  { __typename?: 'Mutation' }
  & { removeUserAvatar?: Maybe<(
    { __typename?: 'RemoveUserAvatarPayload' }
    & { user: (
      { __typename?: 'User' }
      & Pick<User, 'username'>
    ) }
  )> }
);

export type UserQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type UserQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'username' | 'slug' | 'bio' | 'avatarUrl' | 'privacy' | 'banned' | 'role'>
    & { followers?: Maybe<(
      { __typename?: 'UserConnection' }
      & Pick<UserConnection, 'totalCount'>
    )>, following?: Maybe<(
      { __typename?: 'UserConnection' }
      & Pick<UserConnection, 'totalCount'>
    )> }
  )> }
);

export type UserActivityQueryVariables = Exact<{
  userId: Scalars['ID'];
  cursor: Scalars['String'];
}>;


export type UserActivityQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & { activity?: Maybe<(
      { __typename?: 'EventConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Event' }
        & EventCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type UserFavoritesQueryVariables = Exact<{
  userId: Scalars['ID'];
  cursor: Scalars['String'];
}>;


export type UserFavoritesQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & { favoritedGames?: Maybe<(
      { __typename?: 'GameConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Game' }
        & GameCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type UserFollowersQueryVariables = Exact<{
  userId: Scalars['ID'];
  cursor: Scalars['String'];
}>;


export type UserFollowersQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & { followers?: Maybe<(
      { __typename?: 'UserConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'User' }
        & UserCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type UserFollowingQueryVariables = Exact<{
  userId: Scalars['ID'];
  cursor: Scalars['String'];
}>;


export type UserFollowingQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & { following?: Maybe<(
      { __typename?: 'UserConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'User' }
        & UserCardFieldsFragment
      )>>>, pageInfo: (
        { __typename?: 'PageInfo' }
        & PaginationFieldsFragment
      ) }
    )> }
  )> }
);

export type UsersQueryVariables = Exact<{
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  sortBy?: Maybe<UserSort>;
}>;


export type UsersQuery = (
  { __typename?: 'Query' }
  & { users?: Maybe<(
    { __typename?: 'UserConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'User' }
      & UserCardFieldsFragment
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & PaginationFieldsFragment
    ) }
  )> }
);

export const EventCardFieldsFragmentDoc: DocumentNode<EventCardFieldsFragment, unknown> = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"eventCardFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Event"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"eventCategory"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"SMALL"}}]}]}},{"kind":"Field","name":{"kind":"Name","value":"eventable"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GamePurchase"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Relationship"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"followed"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FavoriteGame"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]};
export const GameCardFieldsFragmentDoc: DocumentNode<GameCardFieldsFragment, unknown> = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"gameCardFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Game"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"coverUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"MEDIUM"}}]},{"kind":"Field","name":{"kind":"Name","value":"platforms"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"3"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"developers"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"3"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"isFavorited"}}]}}]};
export const PaginationFieldsFragmentDoc: DocumentNode<PaginationFieldsFragment, unknown> = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"paginationFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"PageInfo"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hasPreviousPage"}},{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"startCursor"}},{"kind":"Field","name":{"kind":"Name","value":"endCursor"}}]}}]};
export const UserCardFieldsFragmentDoc: DocumentNode<UserCardFieldsFragment, unknown> = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"userCardFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"bio"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"MEDIUM"}}]},{"kind":"Field","name":{"kind":"Name","value":"privacy"}},{"kind":"Field","name":{"kind":"Name","value":"banned"}},{"kind":"Field","name":{"kind":"Name","value":"role"}},{"kind":"Field","name":{"kind":"Name","value":"gamePurchases"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]};
export const DeleteEventDocument: DocumentNode<DeleteEventMutation, DeleteEventMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteEvent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteEvent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"eventId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const RemoveFromSteamBlocklistDocument: DocumentNode<RemoveFromSteamBlocklistMutation, RemoveFromSteamBlocklistMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RemoveFromSteamBlocklist"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"blocklistEntryId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"removeFromSteamBlocklist"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"steamBlocklistEntryId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"blocklistEntryId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const RemoveFromWikidataBlocklistDocument: DocumentNode<RemoveFromWikidataBlocklistMutation, RemoveFromWikidataBlocklistMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RemoveFromWikidataBlocklist"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"blocklistEntryId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"removeFromWikidataBlocklist"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"wikidataBlocklistEntryId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"blocklistEntryId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const CreateCompanyDocument: DocumentNode<CreateCompanyMutation, CreateCompanyMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateCompany"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createCompany"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"company"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const DeleteCompanyDocument: DocumentNode<DeleteCompanyMutation, DeleteCompanyMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteCompany"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteCompany"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"companyId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const UpdateCompanyDocument: DocumentNode<UpdateCompanyMutation, UpdateCompanyMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCompany"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateCompany"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"companyId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"company"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const CreateEngineDocument: DocumentNode<CreateEngineMutation, CreateEngineMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateEngine"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createEngine"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"engine"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const DeleteEngineDocument: DocumentNode<DeleteEngineMutation, DeleteEngineMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteEngine"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteEngine"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"engineId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const UpdateEngineDocument: DocumentNode<UpdateEngineMutation, UpdateEngineMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateEngine"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateEngine"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"engineId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"engine"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const AddGameToLibraryDocument: DocumentNode<AddGameToLibraryMutation, AddGameToLibraryMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AddGameToLibrary"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"gameId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"rating"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startDate"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ISO8601Date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"completionDate"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ISO8601Date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"completionStatus"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"GamePurchaseCompletionStatus"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"comments"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"hoursPlayed"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"replayCount"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"platforms"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stores"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addGameToLibrary"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gameId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"gameId"}}},{"kind":"Argument","name":{"kind":"Name","value":"rating"},"value":{"kind":"Variable","name":{"kind":"Name","value":"rating"}}},{"kind":"Argument","name":{"kind":"Name","value":"startDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startDate"}}},{"kind":"Argument","name":{"kind":"Name","value":"completionDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"completionDate"}}},{"kind":"Argument","name":{"kind":"Name","value":"completionStatus"},"value":{"kind":"Variable","name":{"kind":"Name","value":"completionStatus"}}},{"kind":"Argument","name":{"kind":"Name","value":"comments"},"value":{"kind":"Variable","name":{"kind":"Name","value":"comments"}}},{"kind":"Argument","name":{"kind":"Name","value":"hoursPlayed"},"value":{"kind":"Variable","name":{"kind":"Name","value":"hoursPlayed"}}},{"kind":"Argument","name":{"kind":"Name","value":"replayCount"},"value":{"kind":"Variable","name":{"kind":"Name","value":"replayCount"}}},{"kind":"Argument","name":{"kind":"Name","value":"platforms"},"value":{"kind":"Variable","name":{"kind":"Name","value":"platforms"}}},{"kind":"Argument","name":{"kind":"Name","value":"stores"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stores"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"gamePurchase"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const AddGameToWikidataBlocklistDocument: DocumentNode<AddGameToWikidataBlocklistMutation, AddGameToWikidataBlocklistMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AddGameToWikidataBlocklist"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addToWikidataBlocklist"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"wikidataBlocklistEntry"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const DeleteGameDocument: DocumentNode<DeleteGameMutation, DeleteGameMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGame"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteGame"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gameId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const FavoriteGameDocument: DocumentNode<FavoriteGameMutation, FavoriteGameMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"FavoriteGame"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"favoriteGame"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gameId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};
export const MergeGamesDocument: DocumentNode<MergeGamesMutation, MergeGamesMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"MergeGames"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"gameToKeepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"gameToMergeId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mergeGames"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gameToKeepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"gameToKeepId"}}},{"kind":"Argument","name":{"kind":"Name","value":"gameToMergeId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"gameToMergeId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};
export const RemoveGameCoverDocument: DocumentNode<RemoveGameCoverMutation, RemoveGameCoverMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RemoveGameCover"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"removeGameCover"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gameId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};
export const RemoveGameFromLibraryDocument: DocumentNode<RemoveGameFromLibraryMutation, RemoveGameFromLibraryMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RemoveGameFromLibrary"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"removeGameFromLibrary"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gameId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};
export const UnfavoriteGameDocument: DocumentNode<UnfavoriteGameMutation, UnfavoriteGameMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UnfavoriteGame"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"unfavoriteGame"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gameId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};
export const UpdateGameInLibraryDocument: DocumentNode<UpdateGameInLibraryMutation, UpdateGameInLibraryMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGameInLibrary"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"gamePurchaseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"rating"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startDate"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ISO8601Date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"completionDate"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ISO8601Date"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"completionStatus"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"GamePurchaseCompletionStatus"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"comments"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"hoursPlayed"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"replayCount"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"platforms"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stores"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateGameInLibrary"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"gamePurchaseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"gamePurchaseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"rating"},"value":{"kind":"Variable","name":{"kind":"Name","value":"rating"}}},{"kind":"Argument","name":{"kind":"Name","value":"startDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startDate"}}},{"kind":"Argument","name":{"kind":"Name","value":"completionDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"completionDate"}}},{"kind":"Argument","name":{"kind":"Name","value":"completionStatus"},"value":{"kind":"Variable","name":{"kind":"Name","value":"completionStatus"}}},{"kind":"Argument","name":{"kind":"Name","value":"comments"},"value":{"kind":"Variable","name":{"kind":"Name","value":"comments"}}},{"kind":"Argument","name":{"kind":"Name","value":"hoursPlayed"},"value":{"kind":"Variable","name":{"kind":"Name","value":"hoursPlayed"}}},{"kind":"Argument","name":{"kind":"Name","value":"replayCount"},"value":{"kind":"Variable","name":{"kind":"Name","value":"replayCount"}}},{"kind":"Argument","name":{"kind":"Name","value":"platforms"},"value":{"kind":"Variable","name":{"kind":"Name","value":"platforms"}}},{"kind":"Argument","name":{"kind":"Name","value":"stores"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stores"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"gamePurchase"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const CreateGenreDocument: DocumentNode<CreateGenreMutation, CreateGenreMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateGenre"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createGenre"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const DeleteGenreDocument: DocumentNode<DeleteGenreMutation, DeleteGenreMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGenre"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteGenre"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"genreId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const UpdateGenreDocument: DocumentNode<UpdateGenreMutation, UpdateGenreMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGenre"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateGenre"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"genreId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const CreatePlatformDocument: DocumentNode<CreatePlatformMutation, CreatePlatformMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreatePlatform"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPlatform"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"platform"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const DeletePlatformDocument: DocumentNode<DeletePlatformMutation, DeletePlatformMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeletePlatform"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deletePlatform"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"platformId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const UpdatePlatformDocument: DocumentNode<UpdatePlatformMutation, UpdatePlatformMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdatePlatform"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlatform"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"platformId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"platform"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const CreateSeriesDocument: DocumentNode<CreateSeriesMutation, CreateSeriesMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateSeries"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createSeries"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"series"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const DeleteSeriesDocument: DocumentNode<DeleteSeriesMutation, DeleteSeriesMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteSeries"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteSeries"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"seriesId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const UpdateSeriesDocument: DocumentNode<UpdateSeriesMutation, UpdateSeriesMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSeries"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateSeries"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"seriesId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"wikidataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"wikidataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"series"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const CreateStoreDocument: DocumentNode<CreateStoreMutation, CreateStoreMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateStore"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createStore"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const DeleteStoreDocument: DocumentNode<DeleteStoreMutation, DeleteStoreMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteStore"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteStore"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"storeId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleted"}}]}}]}}]};
export const UpdateStoreDocument: DocumentNode<UpdateStoreMutation, UpdateStoreMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateStore"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateStore"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"storeId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]};
export const ActivityFeedDocument: DocumentNode<ActivityFeedQuery, ActivityFeedQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ActivityFeed"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"feedType"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ActivityFeed"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activity"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"feedType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"feedType"}}},{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"eventCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...EventCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const GamePurchaseDocument: DocumentNode<GamePurchaseQuery, GamePurchaseQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GamePurchase"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"gamePurchase"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rating"}},{"kind":"Field","name":{"kind":"Name","value":"startDate"}},{"kind":"Field","name":{"kind":"Name","value":"completionDate"}},{"kind":"Field","name":{"kind":"Name","value":"completionStatus"}},{"kind":"Field","name":{"kind":"Name","value":"comments"}},{"kind":"Field","name":{"kind":"Name","value":"hoursPlayed"}},{"kind":"Field","name":{"kind":"Name","value":"replayCount"}},{"kind":"Field","name":{"kind":"Name","value":"platforms"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"stores"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]};
export const GlobalSearchDocument: DocumentNode<GlobalSearchQuery, GlobalSearchQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GlobalSearch"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"globalSearch"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CompanySearchResult"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"searchableId"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"EngineSearchResult"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"searchableId"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GameSearchResult"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"searchableId"}},{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"releaseDate"}},{"kind":"Field","name":{"kind":"Name","value":"developerName"}},{"kind":"Field","alias":{"kind":"Name","value":"imageUrl"},"name":{"kind":"Name","value":"coverUrl"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GenreSearchResult"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"searchableId"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"PlatformSearchResult"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"searchableId"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SeriesSearchResult"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"searchableId"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UserSearchResult"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"searchableId"}},{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","alias":{"kind":"Name","value":"imageUrl"},"name":{"kind":"Name","value":"avatarUrl"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"endCursor"}}]}}]}}]}}]};
export const HomeStatisticsDocument: DocumentNode<HomeStatisticsQuery, HomeStatisticsQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"HomeStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"basicSiteStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"companies"}},{"kind":"Field","name":{"kind":"Name","value":"engines"}},{"kind":"Field","name":{"kind":"Name","value":"games"}},{"kind":"Field","name":{"kind":"Name","value":"genres"}},{"kind":"Field","name":{"kind":"Name","value":"platforms"}},{"kind":"Field","name":{"kind":"Name","value":"series"}}]}}]}}]};
export const LiveStatisticsDocument: DocumentNode<LiveStatisticsQuery, LiveStatisticsQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"LiveStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"liveStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"users"}},{"kind":"Field","name":{"kind":"Name","value":"games"}},{"kind":"Field","name":{"kind":"Name","value":"platforms"}},{"kind":"Field","name":{"kind":"Name","value":"series"}},{"kind":"Field","name":{"kind":"Name","value":"engines"}},{"kind":"Field","name":{"kind":"Name","value":"companies"}},{"kind":"Field","name":{"kind":"Name","value":"genres"}},{"kind":"Field","name":{"kind":"Name","value":"stores"}},{"kind":"Field","name":{"kind":"Name","value":"events"}},{"kind":"Field","name":{"kind":"Name","value":"gamePurchases"}},{"kind":"Field","name":{"kind":"Name","value":"relationships"}},{"kind":"Field","name":{"kind":"Name","value":"gamesWithCovers"}},{"kind":"Field","name":{"kind":"Name","value":"gamesWithReleaseDates"}},{"kind":"Field","name":{"kind":"Name","value":"bannedUsers"}},{"kind":"Field","name":{"kind":"Name","value":"mobygamesIds"}},{"kind":"Field","name":{"kind":"Name","value":"pcgamingwikiIds"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataIds"}},{"kind":"Field","name":{"kind":"Name","value":"giantbombIds"}},{"kind":"Field","name":{"kind":"Name","value":"steamAppIds"}},{"kind":"Field","name":{"kind":"Name","value":"epicGamesStoreIds"}},{"kind":"Field","name":{"kind":"Name","value":"gogIds"}},{"kind":"Field","name":{"kind":"Name","value":"igdbIds"}},{"kind":"Field","name":{"kind":"Name","value":"companyVersions"}},{"kind":"Field","name":{"kind":"Name","value":"gameVersions"}},{"kind":"Field","name":{"kind":"Name","value":"genreVersions"}},{"kind":"Field","name":{"kind":"Name","value":"engineVersions"}},{"kind":"Field","name":{"kind":"Name","value":"platformVersions"}},{"kind":"Field","name":{"kind":"Name","value":"seriesVersions"}}]}}]}}]};
export const SiteStatisticsDocument: DocumentNode<SiteStatisticsQuery, SiteStatisticsQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SiteStatistics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"siteStatistics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}},{"kind":"Argument","name":{"kind":"Name","value":"sortDirection"},"value":{"kind":"EnumValue","value":"DESC"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"users"}},{"kind":"Field","name":{"kind":"Name","value":"games"}},{"kind":"Field","name":{"kind":"Name","value":"platforms"}},{"kind":"Field","name":{"kind":"Name","value":"series"}},{"kind":"Field","name":{"kind":"Name","value":"engines"}},{"kind":"Field","name":{"kind":"Name","value":"companies"}},{"kind":"Field","name":{"kind":"Name","value":"genres"}},{"kind":"Field","name":{"kind":"Name","value":"stores"}},{"kind":"Field","name":{"kind":"Name","value":"events"}},{"kind":"Field","name":{"kind":"Name","value":"gamePurchases"}},{"kind":"Field","name":{"kind":"Name","value":"relationships"}},{"kind":"Field","name":{"kind":"Name","value":"gamesWithCovers"}},{"kind":"Field","name":{"kind":"Name","value":"gamesWithReleaseDates"}},{"kind":"Field","name":{"kind":"Name","value":"bannedUsers"}},{"kind":"Field","name":{"kind":"Name","value":"mobygamesIds"}},{"kind":"Field","name":{"kind":"Name","value":"pcgamingwikiIds"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataIds"}},{"kind":"Field","name":{"kind":"Name","value":"giantbombIds"}},{"kind":"Field","name":{"kind":"Name","value":"steamAppIds"}},{"kind":"Field","name":{"kind":"Name","value":"epicGamesStoreIds"}},{"kind":"Field","name":{"kind":"Name","value":"gogIds"}},{"kind":"Field","name":{"kind":"Name","value":"igdbIds"}},{"kind":"Field","name":{"kind":"Name","value":"companyVersions"}},{"kind":"Field","name":{"kind":"Name","value":"gameVersions"}},{"kind":"Field","name":{"kind":"Name","value":"genreVersions"}},{"kind":"Field","name":{"kind":"Name","value":"engineVersions"}},{"kind":"Field","name":{"kind":"Name","value":"platformVersions"}},{"kind":"Field","name":{"kind":"Name","value":"seriesVersions"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const SteamBlocklistDocument: DocumentNode<SteamBlocklistQuery, SteamBlocklistQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SteamBlocklist"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"steamBlocklist"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"steamAppId"}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const WikidataBlocklistDocument: DocumentNode<WikidataBlocklistQuery, WikidataBlocklistQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"WikidataBlocklist"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"wikidataBlocklist"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const CompaniesDocument: DocumentNode<CompaniesQuery, CompaniesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Companies"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"companies"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const CompanyDocument: DocumentNode<CompanyQuery, CompanyQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Company"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"developedBefore"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"developedLast"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"developedAfter"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"publishedBefore"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"publishedLast"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"publishedAfter"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"company"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"developedGames"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"developedBefore"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"developedLast"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"developedAfter"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"publishedGames"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"publishedBefore"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"publishedLast"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"publishedAfter"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const EngineDocument: DocumentNode<EngineQuery, EngineQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Engine"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"engine"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"games"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const EnginesDocument: DocumentNode<EnginesQuery, EnginesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Engines"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"engines"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const GameDocument: DocumentNode<GameQuery, GameQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Game"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"game"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"releaseDate"}},{"kind":"Field","name":{"kind":"Name","value":"coverUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"LARGE"}}]},{"kind":"Field","name":{"kind":"Name","value":"avgRating"}},{"kind":"Field","name":{"kind":"Name","value":"genres"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"platforms"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"series"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"games"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"4"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"coverUrl"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"developers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"publishers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"engines"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"owners"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"SMALL"}}]}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"favoriters"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"SMALL"}}]}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"igdbId"}},{"kind":"Field","name":{"kind":"Name","value":"gogId"}},{"kind":"Field","name":{"kind":"Name","value":"steamAppIds"}},{"kind":"Field","name":{"kind":"Name","value":"epicGamesStoreId"}},{"kind":"Field","name":{"kind":"Name","value":"mobygamesId"}},{"kind":"Field","name":{"kind":"Name","value":"pcgamingwikiId"}},{"kind":"Field","name":{"kind":"Name","value":"giantbombId"}},{"kind":"Field","name":{"kind":"Name","value":"isFavorited"}},{"kind":"Field","name":{"kind":"Name","value":"isInLibrary"}},{"kind":"Field","name":{"kind":"Name","value":"gamePurchaseId"}}]}}]}}]};
export const GameSearchDocument: DocumentNode<GameSearchQuery, GameSearchQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GameSearch"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"gameSearch"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};
export const GamesDocument: DocumentNode<GamesQuery, GamesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Games"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sortBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"GameSort"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"platformId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"byYear"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"games"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}},{"kind":"Argument","name":{"kind":"Name","value":"sortBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sortBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"onPlatform"},"value":{"kind":"Variable","name":{"kind":"Name","value":"platformId"}}},{"kind":"Argument","name":{"kind":"Name","value":"byYear"},"value":{"kind":"Variable","name":{"kind":"Name","value":"byYear"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const GenreDocument: DocumentNode<GenreQuery, GenreQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Genre"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"genre"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"games"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const GenresDocument: DocumentNode<GenresQuery, GenresQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Genres"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"genres"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const PlatformDocument: DocumentNode<PlatformQuery, PlatformQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Platform"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"platform"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"games"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const PlatformSearchDocument: DocumentNode<PlatformSearchQuery, PlatformSearchQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"PlatformSearch"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"platformSearch"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};
export const PlatformsDocument: DocumentNode<PlatformsQuery, PlatformsQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Platforms"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"platforms"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const SeriesDocument: DocumentNode<SeriesQuery, SeriesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Series"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"series"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"wikidataId"}},{"kind":"Field","name":{"kind":"Name","value":"games"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const SeriesListDocument: DocumentNode<SeriesListQuery, SeriesListQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SeriesList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"seriesList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const StoreDocument: DocumentNode<StoreQuery, StoreQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Store"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"store"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]};
export const StoreSearchDocument: DocumentNode<StoreSearchQuery, StoreSearchQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"StoreSearch"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"storeSearch"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]};
export const StoresDocument: DocumentNode<StoresQuery, StoresQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Stores"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stores"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...PaginationFieldsFragmentDoc.definitions]};
export const RemoveUserAvatarDocument: DocumentNode<RemoveUserAvatarMutation, RemoveUserAvatarMutationVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RemoveUserAvatar"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"removeUserAvatar"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"username"}}]}}]}}]}}]};
export const UserDocument: DocumentNode<UserQuery, UserQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"User"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"bio"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"size"},"value":{"kind":"EnumValue","value":"MEDIUM"}}]},{"kind":"Field","name":{"kind":"Name","value":"privacy"}},{"kind":"Field","name":{"kind":"Name","value":"banned"}},{"kind":"Field","name":{"kind":"Name","value":"role"}},{"kind":"Field","name":{"kind":"Name","value":"followers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"following"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]};
export const UserActivityDocument: DocumentNode<UserActivityQuery, UserActivityQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserActivity"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activity"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"eventCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...EventCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const UserFavoritesDocument: DocumentNode<UserFavoritesQuery, UserFavoritesQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserFavorites"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"favoritedGames"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"gameCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...GameCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const UserFollowersDocument: DocumentNode<UserFollowersQuery, UserFollowersQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserFollowers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"followers"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"userCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...UserCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const UserFollowingDocument: DocumentNode<UserFollowingQuery, UserFollowingQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserFollowing"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"following"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"userCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}}]}},...UserCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};
export const UsersDocument: DocumentNode<UsersQuery, UsersQueryVariables> = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Users"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"before"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"last"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sortBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"UserSort"}},"defaultValue":{"kind":"NullValue"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"users"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"before"},"value":{"kind":"Variable","name":{"kind":"Name","value":"before"}}},{"kind":"Argument","name":{"kind":"Name","value":"last"},"value":{"kind":"Variable","name":{"kind":"Name","value":"last"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}},{"kind":"Argument","name":{"kind":"Name","value":"sortBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sortBy"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"userCardFields"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"paginationFields"}}]}}]}}]}},...UserCardFieldsFragmentDoc.definitions,...PaginationFieldsFragmentDoc.definitions]};